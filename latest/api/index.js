Index.PACKAGES = {"work.martins.simon.expect.core.actions" : [{"name" : "work.martins.simon.expect.core.actions.AbstractReturning", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturning.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturning.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AbstractReturning[WR]) ⇒ Boolean, msg: ⇒ Any): AbstractReturning[WR]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturning.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AbstractReturning[WR]) ⇒ Boolean): AbstractReturning[WR]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturning.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): AbstractReturning[WR]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturning.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): AbstractReturning[WR]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturning.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (AbstractReturning[WR], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturning.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (AbstractReturning[WR], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturning.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "pfNotDefined", "tail" : "(r: WR): T", "member" : "work.martins.simon.expect.core.actions.Action.pfNotDefined", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturning.html#pfNotDefined[T](r:R):T", "kind" : "def"}, {"label" : "=\/>", "tail" : "", "member" : "work.martins.simon.expect.core.actions.Action.=\/>", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturning.html#=\/>[-A,+B]=PartialFunction[A,B]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturning.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturning.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturning.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturning.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturning.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturning.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturning.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturning.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturning.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturning.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturning.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturning.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturning.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturning.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturning.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturning.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturning.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturning.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturning.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "transform", "tail" : "(flatMapPF: =\/>[WR, Expect[T]])(mapPF: =\/>[WR, T]): AbstractReturning[T]", "member" : "work.martins.simon.expect.core.actions.AbstractReturning.transform", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturning.html#transform[T](flatMapPF:AbstractReturning.this.=\/>[WR,work.martins.simon.expect.core.Expect[T]])(mapPF:AbstractReturning.this.=\/>[WR,T]):work.martins.simon.expect.core.actions.AbstractReturning[T]", "kind" : "abstract def"}, {"label" : "flatMap", "tail" : "(f: (WR) ⇒ Expect[T]): AbstractReturning[T]", "member" : "work.martins.simon.expect.core.actions.AbstractReturning.flatMap", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturning.html#flatMap[T](f:WR=>work.martins.simon.expect.core.Expect[T]):work.martins.simon.expect.core.actions.AbstractReturning[T]", "kind" : "abstract def"}, {"label" : "map", "tail" : "(f: (WR) ⇒ T): AbstractReturning[T]", "member" : "work.martins.simon.expect.core.actions.AbstractReturning.map", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturning.html#map[T](f:WR=>T):work.martins.simon.expect.core.actions.AbstractReturning[T]", "kind" : "abstract def"}, {"label" : "structurallyEquals", "tail" : "(other: Action[WR, WW]): Boolean", "member" : "work.martins.simon.expect.core.actions.Action.structurallyEquals", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturning.html#structurallyEquals[WW[X]<:W[X]](other:work.martins.simon.expect.core.actions.Action[R,WW]):Boolean", "kind" : "abstract def"}, {"label" : "execute", "tail" : "(when: When[WR], process: RichProcess, intermediateResult: IntermediateResult[WR]): IntermediateResult[WR]", "member" : "work.martins.simon.expect.core.actions.Action.execute", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturning.html#execute(when:W[R],process:work.martins.simon.expect.core.RichProcess,intermediateResult:work.martins.simon.expect.core.IntermediateResult[R]):work.martins.simon.expect.core.IntermediateResult[R]", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturning.html", "kind" : "trait"}, {"name" : "work.martins.simon.expect.core.actions.AbstractReturningWithRegex", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturningWithRegex.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturningWithRegex.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AbstractReturningWithRegex[WR]) ⇒ Boolean, msg: ⇒ Any): AbstractReturningWithRegex[WR]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturningWithRegex.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AbstractReturningWithRegex[WR]) ⇒ Boolean): AbstractReturningWithRegex[WR]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturningWithRegex.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): AbstractReturningWithRegex[WR]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturningWithRegex.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): AbstractReturningWithRegex[WR]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturningWithRegex.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (AbstractReturningWithRegex[WR], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturningWithRegex.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (AbstractReturningWithRegex[WR], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturningWithRegex.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "pfNotDefined", "tail" : "(r: WR): T", "member" : "work.martins.simon.expect.core.actions.Action.pfNotDefined", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturningWithRegex.html#pfNotDefined[T](r:R):T", "kind" : "def"}, {"label" : "=\/>", "tail" : "", "member" : "work.martins.simon.expect.core.actions.Action.=\/>", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturningWithRegex.html#=\/>[-A,+B]=PartialFunction[A,B]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturningWithRegex.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturningWithRegex.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturningWithRegex.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturningWithRegex.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturningWithRegex.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturningWithRegex.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturningWithRegex.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturningWithRegex.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturningWithRegex.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturningWithRegex.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturningWithRegex.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturningWithRegex.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturningWithRegex.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturningWithRegex.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturningWithRegex.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturningWithRegex.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturningWithRegex.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturningWithRegex.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturningWithRegex.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "transform", "tail" : "(flatMapPF: =\/>[WR, Expect[T]])(mapPF: =\/>[WR, T]): AbstractReturningWithRegex[T]", "member" : "work.martins.simon.expect.core.actions.AbstractReturningWithRegex.transform", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturningWithRegex.html#transform[T](flatMapPF:AbstractReturningWithRegex.this.=\/>[WR,work.martins.simon.expect.core.Expect[T]])(mapPF:AbstractReturningWithRegex.this.=\/>[WR,T]):work.martins.simon.expect.core.actions.AbstractReturningWithRegex[T]", "kind" : "abstract def"}, {"label" : "flatMap", "tail" : "(f: (WR) ⇒ Expect[T]): AbstractReturningWithRegex[T]", "member" : "work.martins.simon.expect.core.actions.AbstractReturningWithRegex.flatMap", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturningWithRegex.html#flatMap[T](f:WR=>work.martins.simon.expect.core.Expect[T]):work.martins.simon.expect.core.actions.AbstractReturningWithRegex[T]", "kind" : "abstract def"}, {"label" : "map", "tail" : "(f: (WR) ⇒ T): AbstractReturningWithRegex[T]", "member" : "work.martins.simon.expect.core.actions.AbstractReturningWithRegex.map", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturningWithRegex.html#map[T](f:WR=>T):work.martins.simon.expect.core.actions.AbstractReturningWithRegex[T]", "kind" : "abstract def"}, {"label" : "structurallyEquals", "tail" : "(other: Action[WR, WW]): Boolean", "member" : "work.martins.simon.expect.core.actions.Action.structurallyEquals", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturningWithRegex.html#structurallyEquals[WW[X]<:W[X]](other:work.martins.simon.expect.core.actions.Action[R,WW]):Boolean", "kind" : "abstract def"}, {"label" : "execute", "tail" : "(when: RegexWhen[WR], process: RichProcess, intermediateResult: IntermediateResult[WR]): IntermediateResult[WR]", "member" : "work.martins.simon.expect.core.actions.Action.execute", "link" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturningWithRegex.html#execute(when:W[R],process:work.martins.simon.expect.core.RichProcess,intermediateResult:work.martins.simon.expect.core.IntermediateResult[R]):work.martins.simon.expect.core.IntermediateResult[R]", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "work\/martins\/simon\/expect\/core\/actions\/AbstractReturningWithRegex.html", "kind" : "trait"}, {"name" : "work.martins.simon.expect.core.actions.Action", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "work\/martins\/simon\/expect\/core\/actions\/Action.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "work\/martins\/simon\/expect\/core\/actions\/Action.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Action[R, W]) ⇒ Boolean, msg: ⇒ Any): Action[R, W]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/actions\/Action.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Action[R, W]) ⇒ Boolean): Action[R, W]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/actions\/Action.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Action[R, W]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/actions\/Action.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Action[R, W]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/actions\/Action.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Action[R, W], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "work\/martins\/simon\/expect\/core\/actions\/Action.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Action[R, W], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "work\/martins\/simon\/expect\/core\/actions\/Action.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "pfNotDefined", "tail" : "(r: R): T", "member" : "work.martins.simon.expect.core.actions.Action.pfNotDefined", "link" : "work\/martins\/simon\/expect\/core\/actions\/Action.html#pfNotDefined[T](r:R):T", "kind" : "def"}, {"label" : "=\/>", "tail" : "", "member" : "work.martins.simon.expect.core.actions.Action.=\/>", "link" : "work\/martins\/simon\/expect\/core\/actions\/Action.html#=\/>[-A,+B]=PartialFunction[A,B]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "work\/martins\/simon\/expect\/core\/actions\/Action.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "work\/martins\/simon\/expect\/core\/actions\/Action.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "work\/martins\/simon\/expect\/core\/actions\/Action.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "work\/martins\/simon\/expect\/core\/actions\/Action.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "work\/martins\/simon\/expect\/core\/actions\/Action.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "work\/martins\/simon\/expect\/core\/actions\/Action.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "work\/martins\/simon\/expect\/core\/actions\/Action.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/actions\/Action.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/actions\/Action.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/actions\/Action.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "work\/martins\/simon\/expect\/core\/actions\/Action.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "work\/martins\/simon\/expect\/core\/actions\/Action.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "work\/martins\/simon\/expect\/core\/actions\/Action.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "work\/martins\/simon\/expect\/core\/actions\/Action.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "work\/martins\/simon\/expect\/core\/actions\/Action.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "work\/martins\/simon\/expect\/core\/actions\/Action.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "work\/martins\/simon\/expect\/core\/actions\/Action.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "work\/martins\/simon\/expect\/core\/actions\/Action.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "work\/martins\/simon\/expect\/core\/actions\/Action.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "structurallyEquals", "tail" : "(other: Action[R, WW]): Boolean", "member" : "work.martins.simon.expect.core.actions.Action.structurallyEquals", "link" : "work\/martins\/simon\/expect\/core\/actions\/Action.html#structurallyEquals[WW[X]<:W[X]](other:work.martins.simon.expect.core.actions.Action[R,WW]):Boolean", "kind" : "abstract def"}, {"label" : "transform", "tail" : "(flatMapPF: =\/>[R, Expect[T]])(mapPF: =\/>[R, T]): Action[T, W]", "member" : "work.martins.simon.expect.core.actions.Action.transform", "link" : "work\/martins\/simon\/expect\/core\/actions\/Action.html#transform[T](flatMapPF:Action.this.=\/>[R,work.martins.simon.expect.core.Expect[T]])(mapPF:Action.this.=\/>[R,T]):work.martins.simon.expect.core.actions.Action[T,W]", "kind" : "abstract def"}, {"label" : "flatMap", "tail" : "(f: (R) ⇒ Expect[T]): Action[T, W]", "member" : "work.martins.simon.expect.core.actions.Action.flatMap", "link" : "work\/martins\/simon\/expect\/core\/actions\/Action.html#flatMap[T](f:R=>work.martins.simon.expect.core.Expect[T]):work.martins.simon.expect.core.actions.Action[T,W]", "kind" : "abstract def"}, {"label" : "map", "tail" : "(f: (R) ⇒ T): Action[T, W]", "member" : "work.martins.simon.expect.core.actions.Action.map", "link" : "work\/martins\/simon\/expect\/core\/actions\/Action.html#map[T](f:R=>T):work.martins.simon.expect.core.actions.Action[T,W]", "kind" : "abstract def"}, {"label" : "execute", "tail" : "(when: W[R], process: RichProcess, intermediateResult: IntermediateResult[R]): IntermediateResult[R]", "member" : "work.martins.simon.expect.core.actions.Action.execute", "link" : "work\/martins\/simon\/expect\/core\/actions\/Action.html#execute(when:W[R],process:work.martins.simon.expect.core.RichProcess,intermediateResult:work.martins.simon.expect.core.IntermediateResult[R]):work.martins.simon.expect.core.IntermediateResult[R]", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "work\/martins\/simon\/expect\/core\/actions\/Action.html", "kind" : "trait"}, {"name" : "work.martins.simon.expect.core.actions.ActionReturningAction", "shortDescription" : "", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningAction.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningAction.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ActionReturningAction[R, T]) ⇒ Boolean, msg: ⇒ Any): ActionReturningAction[R, T]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningAction.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ActionReturningAction[R, T]) ⇒ Boolean): ActionReturningAction[R, T]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningAction.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ActionReturningAction[R, T]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningAction.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ActionReturningAction[R, T]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningAction.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ActionReturningAction[R, T], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningAction.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ActionReturningAction[R, T], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningAction.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "structurallyEquals", "tail" : "(other: Action[T, WW]): Boolean", "member" : "work.martins.simon.expect.core.actions.ActionReturningAction.structurallyEquals", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningAction.html#structurallyEquals[WW[X]<:work.martins.simon.expect.core.When[X]](other:work.martins.simon.expect.core.actions.Action[T,WW]):Boolean", "kind" : "def"}, {"label" : "transform", "tail" : "(flatMapPF: =\/>[T, Expect[U]])(mapPF: =\/>[T, U]): AbstractReturning[U]", "member" : "work.martins.simon.expect.core.actions.ActionReturningAction.transform", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningAction.html#transform[U](flatMapPF:ActionReturningAction.this.=\/>[T,work.martins.simon.expect.core.Expect[U]])(mapPF:ActionReturningAction.this.=\/>[T,U]):work.martins.simon.expect.core.actions.AbstractReturning[U]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (T) ⇒ Expect[U]): AbstractReturning[U]", "member" : "work.martins.simon.expect.core.actions.ActionReturningAction.flatMap", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningAction.html#flatMap[U](f:T=>work.martins.simon.expect.core.Expect[U]):work.martins.simon.expect.core.actions.AbstractReturning[U]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (T) ⇒ U): AbstractReturning[U]", "member" : "work.martins.simon.expect.core.actions.ActionReturningAction.map", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningAction.html#map[U](f:T=>U):work.martins.simon.expect.core.actions.AbstractReturning[U]", "kind" : "def"}, {"label" : "execute", "tail" : "(when: When[T], process: RichProcess, intermediateResult: IntermediateResult[T]): IntermediateResult[T]", "member" : "work.martins.simon.expect.core.actions.ActionReturningAction.execute", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningAction.html#execute(when:work.martins.simon.expect.core.When[T],process:work.martins.simon.expect.core.RichProcess,intermediateResult:work.martins.simon.expect.core.IntermediateResult[T]):work.martins.simon.expect.core.IntermediateResult[T]", "kind" : "def"}, {"member" : "work.martins.simon.expect.core.actions.ActionReturningAction#<init>", "error" : "unsupported entity"}, {"label" : "resultAction", "tail" : ": (R) ⇒ AbstractReturning[T]", "member" : "work.martins.simon.expect.core.actions.ActionReturningAction.resultAction", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningAction.html#resultAction:R=>work.martins.simon.expect.core.actions.AbstractReturning[T]", "kind" : "val"}, {"label" : "parent", "tail" : ": Returning[R]", "member" : "work.martins.simon.expect.core.actions.ActionReturningAction.parent", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningAction.html#parent:work.martins.simon.expect.core.actions.Returning[R]", "kind" : "val"}, {"label" : "pfNotDefined", "tail" : "(r: T): T", "member" : "work.martins.simon.expect.core.actions.Action.pfNotDefined", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningAction.html#pfNotDefined[T](r:R):T", "kind" : "def"}, {"label" : "=\/>", "tail" : "", "member" : "work.martins.simon.expect.core.actions.Action.=\/>", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningAction.html#=\/>[-A,+B]=PartialFunction[A,B]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningAction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningAction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningAction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningAction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningAction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningAction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningAction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningAction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningAction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningAction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningAction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningAction.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningAction.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningAction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningAction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningAction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningAction.html", "kind" : "case class"}, {"name" : "work.martins.simon.expect.core.actions.ActionReturningActionWithRegex", "shortDescription" : "", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningActionWithRegex.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningActionWithRegex.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ActionReturningActionWithRegex[R, T]) ⇒ Boolean, msg: ⇒ Any): ActionReturningActionWithRegex[R, T]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningActionWithRegex.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ActionReturningActionWithRegex[R, T]) ⇒ Boolean): ActionReturningActionWithRegex[R, T]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningActionWithRegex.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ActionReturningActionWithRegex[R, T]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningActionWithRegex.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ActionReturningActionWithRegex[R, T]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningActionWithRegex.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ActionReturningActionWithRegex[R, T], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningActionWithRegex.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ActionReturningActionWithRegex[R, T], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningActionWithRegex.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "structurallyEquals", "tail" : "(other: Action[T, WW]): Boolean", "member" : "work.martins.simon.expect.core.actions.ActionReturningActionWithRegex.structurallyEquals", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningActionWithRegex.html#structurallyEquals[WW[X]<:work.martins.simon.expect.core.RegexWhen[X]](other:work.martins.simon.expect.core.actions.Action[T,WW]):Boolean", "kind" : "def"}, {"label" : "transform", "tail" : "(flatMapPF: =\/>[T, Expect[U]])(mapPF: =\/>[T, U]): AbstractReturningWithRegex[U]", "member" : "work.martins.simon.expect.core.actions.ActionReturningActionWithRegex.transform", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningActionWithRegex.html#transform[U](flatMapPF:ActionReturningActionWithRegex.this.=\/>[T,work.martins.simon.expect.core.Expect[U]])(mapPF:ActionReturningActionWithRegex.this.=\/>[T,U]):work.martins.simon.expect.core.actions.AbstractReturningWithRegex[U]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (T) ⇒ Expect[U]): AbstractReturningWithRegex[U]", "member" : "work.martins.simon.expect.core.actions.ActionReturningActionWithRegex.flatMap", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningActionWithRegex.html#flatMap[U](f:T=>work.martins.simon.expect.core.Expect[U]):work.martins.simon.expect.core.actions.AbstractReturningWithRegex[U]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (T) ⇒ U): AbstractReturningWithRegex[U]", "member" : "work.martins.simon.expect.core.actions.ActionReturningActionWithRegex.map", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningActionWithRegex.html#map[U](f:T=>U):work.martins.simon.expect.core.actions.AbstractReturningWithRegex[U]", "kind" : "def"}, {"label" : "execute", "tail" : "(when: RegexWhen[T], process: RichProcess, intermediateResult: IntermediateResult[T]): IntermediateResult[T]", "member" : "work.martins.simon.expect.core.actions.ActionReturningActionWithRegex.execute", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningActionWithRegex.html#execute(when:work.martins.simon.expect.core.RegexWhen[T],process:work.martins.simon.expect.core.RichProcess,intermediateResult:work.martins.simon.expect.core.IntermediateResult[T]):work.martins.simon.expect.core.IntermediateResult[T]", "kind" : "def"}, {"member" : "work.martins.simon.expect.core.actions.ActionReturningActionWithRegex#<init>", "error" : "unsupported entity"}, {"label" : "resultAction", "tail" : ": (R) ⇒ AbstractReturningWithRegex[T]", "member" : "work.martins.simon.expect.core.actions.ActionReturningActionWithRegex.resultAction", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningActionWithRegex.html#resultAction:R=>work.martins.simon.expect.core.actions.AbstractReturningWithRegex[T]", "kind" : "val"}, {"label" : "parent", "tail" : ": ReturningWithRegex[R]", "member" : "work.martins.simon.expect.core.actions.ActionReturningActionWithRegex.parent", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningActionWithRegex.html#parent:work.martins.simon.expect.core.actions.ReturningWithRegex[R]", "kind" : "val"}, {"label" : "pfNotDefined", "tail" : "(r: T): T", "member" : "work.martins.simon.expect.core.actions.Action.pfNotDefined", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningActionWithRegex.html#pfNotDefined[T](r:R):T", "kind" : "def"}, {"label" : "=\/>", "tail" : "", "member" : "work.martins.simon.expect.core.actions.Action.=\/>", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningActionWithRegex.html#=\/>[-A,+B]=PartialFunction[A,B]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningActionWithRegex.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningActionWithRegex.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningActionWithRegex.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningActionWithRegex.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningActionWithRegex.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningActionWithRegex.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningActionWithRegex.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningActionWithRegex.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningActionWithRegex.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningActionWithRegex.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningActionWithRegex.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningActionWithRegex.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningActionWithRegex.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningActionWithRegex.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningActionWithRegex.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningActionWithRegex.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "work\/martins\/simon\/expect\/core\/actions\/ActionReturningActionWithRegex.html", "kind" : "case class"}, {"name" : "work.martins.simon.expect.core.actions.Exit", "shortDescription" : "When this action is executed the current run of Expect is terminated causing it to return thelast value, if there is a ReturningAction, or the default value otherwise.", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "work\/martins\/simon\/expect\/core\/actions\/Exit.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "work\/martins\/simon\/expect\/core\/actions\/Exit.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Exit[R]) ⇒ Boolean, msg: ⇒ Any): Exit[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/actions\/Exit.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Exit[R]) ⇒ Boolean): Exit[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/actions\/Exit.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Exit[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/actions\/Exit.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Exit[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/actions\/Exit.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Exit[R], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "work\/martins\/simon\/expect\/core\/actions\/Exit.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Exit[R], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "work\/martins\/simon\/expect\/core\/actions\/Exit.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "structurallyEquals", "tail" : "(other: Action[R, WW]): Boolean", "member" : "work.martins.simon.expect.core.actions.Exit.structurallyEquals", "link" : "work\/martins\/simon\/expect\/core\/actions\/Exit.html#structurallyEquals[WW[X]<:work.martins.simon.expect.core.When[X]](other:work.martins.simon.expect.core.actions.Action[R,WW]):Boolean", "kind" : "def"}, {"label" : "transform", "tail" : "(flatMapPF: =\/>[R, Expect[T]])(mapPF: =\/>[R, T]): Action[T, When]", "member" : "work.martins.simon.expect.core.actions.Exit.transform", "link" : "work\/martins\/simon\/expect\/core\/actions\/Exit.html#transform[T](flatMapPF:Exit.this.=\/>[R,work.martins.simon.expect.core.Expect[T]])(mapPF:Exit.this.=\/>[R,T]):work.martins.simon.expect.core.actions.Action[T,work.martins.simon.expect.core.When]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (R) ⇒ Expect[T]): Action[T, When]", "member" : "work.martins.simon.expect.core.actions.Exit.flatMap", "link" : "work\/martins\/simon\/expect\/core\/actions\/Exit.html#flatMap[T](f:R=>work.martins.simon.expect.core.Expect[T]):work.martins.simon.expect.core.actions.Action[T,work.martins.simon.expect.core.When]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (R) ⇒ T): Action[T, When]", "member" : "work.martins.simon.expect.core.actions.Exit.map", "link" : "work\/martins\/simon\/expect\/core\/actions\/Exit.html#map[T](f:R=>T):work.martins.simon.expect.core.actions.Action[T,work.martins.simon.expect.core.When]", "kind" : "def"}, {"label" : "execute", "tail" : "(when: When[R], process: RichProcess, intermediateResult: IntermediateResult[R]): IntermediateResult[R]", "member" : "work.martins.simon.expect.core.actions.Exit.execute", "link" : "work\/martins\/simon\/expect\/core\/actions\/Exit.html#execute(when:work.martins.simon.expect.core.When[R],process:work.martins.simon.expect.core.RichProcess,intermediateResult:work.martins.simon.expect.core.IntermediateResult[R]):work.martins.simon.expect.core.IntermediateResult[R]", "kind" : "def"}, {"member" : "work.martins.simon.expect.core.actions.Exit#<init>", "error" : "unsupported entity"}, {"label" : "pfNotDefined", "tail" : "(r: R): T", "member" : "work.martins.simon.expect.core.actions.Action.pfNotDefined", "link" : "work\/martins\/simon\/expect\/core\/actions\/Exit.html#pfNotDefined[T](r:R):T", "kind" : "def"}, {"label" : "=\/>", "tail" : "", "member" : "work.martins.simon.expect.core.actions.Action.=\/>", "link" : "work\/martins\/simon\/expect\/core\/actions\/Exit.html#=\/>[-A,+B]=PartialFunction[A,B]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "work\/martins\/simon\/expect\/core\/actions\/Exit.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "work\/martins\/simon\/expect\/core\/actions\/Exit.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "work\/martins\/simon\/expect\/core\/actions\/Exit.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "work\/martins\/simon\/expect\/core\/actions\/Exit.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "work\/martins\/simon\/expect\/core\/actions\/Exit.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "work\/martins\/simon\/expect\/core\/actions\/Exit.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "work\/martins\/simon\/expect\/core\/actions\/Exit.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/actions\/Exit.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/actions\/Exit.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/actions\/Exit.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "work\/martins\/simon\/expect\/core\/actions\/Exit.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "work\/martins\/simon\/expect\/core\/actions\/Exit.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "work\/martins\/simon\/expect\/core\/actions\/Exit.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "work\/martins\/simon\/expect\/core\/actions\/Exit.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "work\/martins\/simon\/expect\/core\/actions\/Exit.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "work\/martins\/simon\/expect\/core\/actions\/Exit.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "work\/martins\/simon\/expect\/core\/actions\/Exit.html", "kind" : "case class"}, {"name" : "work.martins.simon.expect.core.actions.Returning", "shortDescription" : "", "object" : "work\/martins\/simon\/expect\/core\/actions\/Returning$.html", "members_object" : [{"label" : "apply", "tail" : "(result: ⇒ R): Returning[R]", "member" : "work.martins.simon.expect.core.actions.Returning.apply", "link" : "work\/martins\/simon\/expect\/core\/actions\/Returning$.html#apply[R](result:=>R):work.martins.simon.expect.core.actions.Returning[R]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "work\/martins\/simon\/expect\/core\/actions\/Returning$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "work\/martins\/simon\/expect\/core\/actions\/Returning$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "work\/martins\/simon\/expect\/core\/actions\/Returning$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "work\/martins\/simon\/expect\/core\/actions\/Returning$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "work\/martins\/simon\/expect\/core\/actions\/Returning$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "work\/martins\/simon\/expect\/core\/actions\/Returning$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "work\/martins\/simon\/expect\/core\/actions\/Returning$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/actions\/Returning$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/actions\/Returning$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/actions\/Returning$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "work\/martins\/simon\/expect\/core\/actions\/Returning$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "work\/martins\/simon\/expect\/core\/actions\/Returning$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "work\/martins\/simon\/expect\/core\/actions\/Returning$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "work\/martins\/simon\/expect\/core\/actions\/Returning$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "work\/martins\/simon\/expect\/core\/actions\/Returning$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "work\/martins\/simon\/expect\/core\/actions\/Returning$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "work\/martins\/simon\/expect\/core\/actions\/Returning$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "work\/martins\/simon\/expect\/core\/actions\/Returning$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "work\/martins\/simon\/expect\/core\/actions\/Returning$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "work\/martins\/simon\/expect\/core\/actions\/Returning.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "work\/martins\/simon\/expect\/core\/actions\/Returning.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Returning[R]) ⇒ Boolean, msg: ⇒ Any): Returning[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/actions\/Returning.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Returning[R]) ⇒ Boolean): Returning[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/actions\/Returning.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Returning[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/actions\/Returning.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Returning[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/actions\/Returning.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Returning[R], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "work\/martins\/simon\/expect\/core\/actions\/Returning.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Returning[R], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "work\/martins\/simon\/expect\/core\/actions\/Returning.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "structurallyEquals", "tail" : "(other: Action[R, WW]): Boolean", "member" : "work.martins.simon.expect.core.actions.Returning.structurallyEquals", "link" : "work\/martins\/simon\/expect\/core\/actions\/Returning.html#structurallyEquals[WW[X]<:work.martins.simon.expect.core.When[X]](other:work.martins.simon.expect.core.actions.Action[R,WW]):Boolean", "kind" : "def"}, {"label" : "transform", "tail" : "(flatMapPF: =\/>[R, Expect[T]])(mapPF: =\/>[R, T]): AbstractReturning[T]", "member" : "work.martins.simon.expect.core.actions.Returning.transform", "link" : "work\/martins\/simon\/expect\/core\/actions\/Returning.html#transform[T](flatMapPF:Returning.this.=\/>[R,work.martins.simon.expect.core.Expect[T]])(mapPF:Returning.this.=\/>[R,T]):work.martins.simon.expect.core.actions.AbstractReturning[T]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (R) ⇒ Expect[T]): AbstractReturning[T]", "member" : "work.martins.simon.expect.core.actions.Returning.flatMap", "link" : "work\/martins\/simon\/expect\/core\/actions\/Returning.html#flatMap[T](f:R=>work.martins.simon.expect.core.Expect[T]):work.martins.simon.expect.core.actions.AbstractReturning[T]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (R) ⇒ T): AbstractReturning[T]", "member" : "work.martins.simon.expect.core.actions.Returning.map", "link" : "work\/martins\/simon\/expect\/core\/actions\/Returning.html#map[T](f:R=>T):work.martins.simon.expect.core.actions.AbstractReturning[T]", "kind" : "def"}, {"label" : "execute", "tail" : "(when: When[R], process: RichProcess, intermediateResult: IntermediateResult[R]): IntermediateResult[R]", "member" : "work.martins.simon.expect.core.actions.Returning.execute", "link" : "work\/martins\/simon\/expect\/core\/actions\/Returning.html#execute(when:work.martins.simon.expect.core.When[R],process:work.martins.simon.expect.core.RichProcess,intermediateResult:work.martins.simon.expect.core.IntermediateResult[R]):work.martins.simon.expect.core.IntermediateResult[R]", "kind" : "def"}, {"member" : "work.martins.simon.expect.core.actions.Returning#<init>", "error" : "unsupported entity"}, {"label" : "result", "tail" : ": (Unit) ⇒ R", "member" : "work.martins.simon.expect.core.actions.Returning.result", "link" : "work\/martins\/simon\/expect\/core\/actions\/Returning.html#result:Unit=>R", "kind" : "val"}, {"label" : "pfNotDefined", "tail" : "(r: R): T", "member" : "work.martins.simon.expect.core.actions.Action.pfNotDefined", "link" : "work\/martins\/simon\/expect\/core\/actions\/Returning.html#pfNotDefined[T](r:R):T", "kind" : "def"}, {"label" : "=\/>", "tail" : "", "member" : "work.martins.simon.expect.core.actions.Action.=\/>", "link" : "work\/martins\/simon\/expect\/core\/actions\/Returning.html#=\/>[-A,+B]=PartialFunction[A,B]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "work\/martins\/simon\/expect\/core\/actions\/Returning.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "work\/martins\/simon\/expect\/core\/actions\/Returning.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "work\/martins\/simon\/expect\/core\/actions\/Returning.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "work\/martins\/simon\/expect\/core\/actions\/Returning.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "work\/martins\/simon\/expect\/core\/actions\/Returning.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "work\/martins\/simon\/expect\/core\/actions\/Returning.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "work\/martins\/simon\/expect\/core\/actions\/Returning.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/actions\/Returning.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/actions\/Returning.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/actions\/Returning.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "work\/martins\/simon\/expect\/core\/actions\/Returning.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "work\/martins\/simon\/expect\/core\/actions\/Returning.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "work\/martins\/simon\/expect\/core\/actions\/Returning.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "work\/martins\/simon\/expect\/core\/actions\/Returning.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "work\/martins\/simon\/expect\/core\/actions\/Returning.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "work\/martins\/simon\/expect\/core\/actions\/Returning.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "work\/martins\/simon\/expect\/core\/actions\/Returning.html", "kind" : "object"}, {"name" : "work.martins.simon.expect.core.actions.ReturningExpect", "shortDescription" : "", "object" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpect$.html", "members_object" : [{"label" : "apply", "tail" : "(result: ⇒ Expect[R]): ReturningExpect[R]", "member" : "work.martins.simon.expect.core.actions.ReturningExpect.apply", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpect$.html#apply[R](result:=>work.martins.simon.expect.core.Expect[R]):work.martins.simon.expect.core.actions.ReturningExpect[R]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpect$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpect$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpect$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpect$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpect$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpect$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpect$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpect$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpect$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpect$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpect$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpect$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpect$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpect$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpect$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpect$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpect$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpect$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpect$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpect.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpect.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ReturningExpect[R]) ⇒ Boolean, msg: ⇒ Any): ReturningExpect[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpect.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ReturningExpect[R]) ⇒ Boolean): ReturningExpect[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpect.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ReturningExpect[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpect.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ReturningExpect[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpect.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ReturningExpect[R], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpect.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ReturningExpect[R], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpect.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "structurallyEquals", "tail" : "(other: Action[R, WW]): Boolean", "member" : "work.martins.simon.expect.core.actions.ReturningExpect.structurallyEquals", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpect.html#structurallyEquals[WW[X]<:work.martins.simon.expect.core.When[X]](other:work.martins.simon.expect.core.actions.Action[R,WW]):Boolean", "kind" : "def"}, {"label" : "transform", "tail" : "(flatMapPF: =\/>[R, Expect[T]])(mapPF: =\/>[R, T]): AbstractReturning[T]", "member" : "work.martins.simon.expect.core.actions.ReturningExpect.transform", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpect.html#transform[T](flatMapPF:ReturningExpect.this.=\/>[R,work.martins.simon.expect.core.Expect[T]])(mapPF:ReturningExpect.this.=\/>[R,T]):work.martins.simon.expect.core.actions.AbstractReturning[T]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (R) ⇒ Expect[T]): AbstractReturning[T]", "member" : "work.martins.simon.expect.core.actions.ReturningExpect.flatMap", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpect.html#flatMap[T](f:R=>work.martins.simon.expect.core.Expect[T]):work.martins.simon.expect.core.actions.AbstractReturning[T]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (R) ⇒ T): AbstractReturning[T]", "member" : "work.martins.simon.expect.core.actions.ReturningExpect.map", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpect.html#map[T](f:R=>T):work.martins.simon.expect.core.actions.AbstractReturning[T]", "kind" : "def"}, {"label" : "execute", "tail" : "(when: When[R], process: RichProcess, intermediateResult: IntermediateResult[R]): IntermediateResult[R]", "member" : "work.martins.simon.expect.core.actions.ReturningExpect.execute", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpect.html#execute(when:work.martins.simon.expect.core.When[R],process:work.martins.simon.expect.core.RichProcess,intermediateResult:work.martins.simon.expect.core.IntermediateResult[R]):work.martins.simon.expect.core.IntermediateResult[R]", "kind" : "def"}, {"member" : "work.martins.simon.expect.core.actions.ReturningExpect#<init>", "error" : "unsupported entity"}, {"label" : "result", "tail" : ": (Unit) ⇒ Expect[R]", "member" : "work.martins.simon.expect.core.actions.ReturningExpect.result", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpect.html#result:Unit=>work.martins.simon.expect.core.Expect[R]", "kind" : "val"}, {"label" : "pfNotDefined", "tail" : "(r: R): T", "member" : "work.martins.simon.expect.core.actions.Action.pfNotDefined", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpect.html#pfNotDefined[T](r:R):T", "kind" : "def"}, {"label" : "=\/>", "tail" : "", "member" : "work.martins.simon.expect.core.actions.Action.=\/>", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpect.html#=\/>[-A,+B]=PartialFunction[A,B]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpect.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpect.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpect.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpect.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpect.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpect.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpect.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpect.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpect.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpect.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpect.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpect.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpect.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpect.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpect.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpect.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpect.html", "kind" : "object"}, {"name" : "work.martins.simon.expect.core.actions.ReturningExpectWithRegex", "shortDescription" : "When this action is executed:", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpectWithRegex.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpectWithRegex.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ReturningExpectWithRegex[R]) ⇒ Boolean, msg: ⇒ Any): ReturningExpectWithRegex[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpectWithRegex.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ReturningExpectWithRegex[R]) ⇒ Boolean): ReturningExpectWithRegex[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpectWithRegex.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ReturningExpectWithRegex[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpectWithRegex.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ReturningExpectWithRegex[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpectWithRegex.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ReturningExpectWithRegex[R], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpectWithRegex.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ReturningExpectWithRegex[R], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpectWithRegex.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "structurallyEquals", "tail" : "(other: Action[R, WW]): Boolean", "member" : "work.martins.simon.expect.core.actions.ReturningExpectWithRegex.structurallyEquals", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpectWithRegex.html#structurallyEquals[WW[X]<:work.martins.simon.expect.core.RegexWhen[X]](other:work.martins.simon.expect.core.actions.Action[R,WW]):Boolean", "kind" : "def"}, {"label" : "transform", "tail" : "(flatMapPF: =\/>[R, Expect[T]])(mapPF: =\/>[R, T]): AbstractReturningWithRegex[T]", "member" : "work.martins.simon.expect.core.actions.ReturningExpectWithRegex.transform", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpectWithRegex.html#transform[T](flatMapPF:ReturningExpectWithRegex.this.=\/>[R,work.martins.simon.expect.core.Expect[T]])(mapPF:ReturningExpectWithRegex.this.=\/>[R,T]):work.martins.simon.expect.core.actions.AbstractReturningWithRegex[T]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (R) ⇒ Expect[T]): AbstractReturningWithRegex[T]", "member" : "work.martins.simon.expect.core.actions.ReturningExpectWithRegex.flatMap", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpectWithRegex.html#flatMap[T](f:R=>work.martins.simon.expect.core.Expect[T]):work.martins.simon.expect.core.actions.AbstractReturningWithRegex[T]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (R) ⇒ T): AbstractReturningWithRegex[T]", "member" : "work.martins.simon.expect.core.actions.ReturningExpectWithRegex.map", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpectWithRegex.html#map[T](f:R=>T):work.martins.simon.expect.core.actions.AbstractReturningWithRegex[T]", "kind" : "def"}, {"label" : "execute", "tail" : "(when: RegexWhen[R], process: RichProcess, intermediateResult: IntermediateResult[R]): IntermediateResult[R]", "member" : "work.martins.simon.expect.core.actions.ReturningExpectWithRegex.execute", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpectWithRegex.html#execute(when:work.martins.simon.expect.core.RegexWhen[R],process:work.martins.simon.expect.core.RichProcess,intermediateResult:work.martins.simon.expect.core.IntermediateResult[R]):work.martins.simon.expect.core.IntermediateResult[R]", "kind" : "def"}, {"member" : "work.martins.simon.expect.core.actions.ReturningExpectWithRegex#<init>", "error" : "unsupported entity"}, {"label" : "result", "tail" : ": (Match) ⇒ Expect[R]", "member" : "work.martins.simon.expect.core.actions.ReturningExpectWithRegex.result", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpectWithRegex.html#result:util.matching.Regex.Match=>work.martins.simon.expect.core.Expect[R]", "kind" : "val"}, {"label" : "pfNotDefined", "tail" : "(r: R): T", "member" : "work.martins.simon.expect.core.actions.Action.pfNotDefined", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpectWithRegex.html#pfNotDefined[T](r:R):T", "kind" : "def"}, {"label" : "=\/>", "tail" : "", "member" : "work.martins.simon.expect.core.actions.Action.=\/>", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpectWithRegex.html#=\/>[-A,+B]=PartialFunction[A,B]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpectWithRegex.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpectWithRegex.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpectWithRegex.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpectWithRegex.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpectWithRegex.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpectWithRegex.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpectWithRegex.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpectWithRegex.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpectWithRegex.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpectWithRegex.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpectWithRegex.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpectWithRegex.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpectWithRegex.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpectWithRegex.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpectWithRegex.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpectWithRegex.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "work\/martins\/simon\/expect\/core\/actions\/ReturningExpectWithRegex.html", "kind" : "case class"}, {"name" : "work.martins.simon.expect.core.actions.ReturningWithRegex", "shortDescription" : "When this Action is executed the result of evaluating result is returned by        the current run of Expect.", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningWithRegex.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningWithRegex.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ReturningWithRegex[R]) ⇒ Boolean, msg: ⇒ Any): ReturningWithRegex[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningWithRegex.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ReturningWithRegex[R]) ⇒ Boolean): ReturningWithRegex[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningWithRegex.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ReturningWithRegex[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningWithRegex.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ReturningWithRegex[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningWithRegex.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ReturningWithRegex[R], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningWithRegex.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ReturningWithRegex[R], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningWithRegex.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "structurallyEquals", "tail" : "(other: Action[R, WW]): Boolean", "member" : "work.martins.simon.expect.core.actions.ReturningWithRegex.structurallyEquals", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningWithRegex.html#structurallyEquals[WW[X]<:work.martins.simon.expect.core.RegexWhen[X]](other:work.martins.simon.expect.core.actions.Action[R,WW]):Boolean", "kind" : "def"}, {"label" : "transform", "tail" : "(flatMapPF: =\/>[R, Expect[T]])(mapPF: =\/>[R, T]): AbstractReturningWithRegex[T]", "member" : "work.martins.simon.expect.core.actions.ReturningWithRegex.transform", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningWithRegex.html#transform[T](flatMapPF:ReturningWithRegex.this.=\/>[R,work.martins.simon.expect.core.Expect[T]])(mapPF:ReturningWithRegex.this.=\/>[R,T]):work.martins.simon.expect.core.actions.AbstractReturningWithRegex[T]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (R) ⇒ Expect[T]): AbstractReturningWithRegex[T]", "member" : "work.martins.simon.expect.core.actions.ReturningWithRegex.flatMap", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningWithRegex.html#flatMap[T](f:R=>work.martins.simon.expect.core.Expect[T]):work.martins.simon.expect.core.actions.AbstractReturningWithRegex[T]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (R) ⇒ T): AbstractReturningWithRegex[T]", "member" : "work.martins.simon.expect.core.actions.ReturningWithRegex.map", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningWithRegex.html#map[T](f:R=>T):work.martins.simon.expect.core.actions.AbstractReturningWithRegex[T]", "kind" : "def"}, {"label" : "execute", "tail" : "(when: RegexWhen[R], process: RichProcess, intermediateResult: IntermediateResult[R]): IntermediateResult[R]", "member" : "work.martins.simon.expect.core.actions.ReturningWithRegex.execute", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningWithRegex.html#execute(when:work.martins.simon.expect.core.RegexWhen[R],process:work.martins.simon.expect.core.RichProcess,intermediateResult:work.martins.simon.expect.core.IntermediateResult[R]):work.martins.simon.expect.core.IntermediateResult[R]", "kind" : "def"}, {"member" : "work.martins.simon.expect.core.actions.ReturningWithRegex#<init>", "error" : "unsupported entity"}, {"label" : "result", "tail" : ": (Match) ⇒ R", "member" : "work.martins.simon.expect.core.actions.ReturningWithRegex.result", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningWithRegex.html#result:util.matching.Regex.Match=>R", "kind" : "val"}, {"label" : "pfNotDefined", "tail" : "(r: R): T", "member" : "work.martins.simon.expect.core.actions.Action.pfNotDefined", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningWithRegex.html#pfNotDefined[T](r:R):T", "kind" : "def"}, {"label" : "=\/>", "tail" : "", "member" : "work.martins.simon.expect.core.actions.Action.=\/>", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningWithRegex.html#=\/>[-A,+B]=PartialFunction[A,B]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningWithRegex.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningWithRegex.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningWithRegex.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningWithRegex.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningWithRegex.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningWithRegex.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningWithRegex.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningWithRegex.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningWithRegex.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningWithRegex.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningWithRegex.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningWithRegex.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningWithRegex.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningWithRegex.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningWithRegex.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "work\/martins\/simon\/expect\/core\/actions\/ReturningWithRegex.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "work\/martins\/simon\/expect\/core\/actions\/ReturningWithRegex.html", "kind" : "case class"}, {"name" : "work.martins.simon.expect.core.actions.Send", "shortDescription" : "When this action is executed text will be sent to the stdIn of the underlying process.", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "work\/martins\/simon\/expect\/core\/actions\/Send.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "work\/martins\/simon\/expect\/core\/actions\/Send.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Send[R]) ⇒ Boolean, msg: ⇒ Any): Send[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/actions\/Send.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Send[R]) ⇒ Boolean): Send[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/actions\/Send.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Send[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/actions\/Send.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Send[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/actions\/Send.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Send[R], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "work\/martins\/simon\/expect\/core\/actions\/Send.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Send[R], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "work\/martins\/simon\/expect\/core\/actions\/Send.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "work.martins.simon.expect.core.actions.Send.toString", "link" : "work\/martins\/simon\/expect\/core\/actions\/Send.html#toString():String", "kind" : "def"}, {"label" : "structurallyEquals", "tail" : "(other: Action[R, WW]): Boolean", "member" : "work.martins.simon.expect.core.actions.Send.structurallyEquals", "link" : "work\/martins\/simon\/expect\/core\/actions\/Send.html#structurallyEquals[WW[X]<:work.martins.simon.expect.core.When[X]](other:work.martins.simon.expect.core.actions.Action[R,WW]):Boolean", "kind" : "def"}, {"label" : "transform", "tail" : "(flatMapPF: =\/>[R, Expect[T]])(mapPF: =\/>[R, T]): Action[T, When]", "member" : "work.martins.simon.expect.core.actions.Send.transform", "link" : "work\/martins\/simon\/expect\/core\/actions\/Send.html#transform[T](flatMapPF:Send.this.=\/>[R,work.martins.simon.expect.core.Expect[T]])(mapPF:Send.this.=\/>[R,T]):work.martins.simon.expect.core.actions.Action[T,work.martins.simon.expect.core.When]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (R) ⇒ Expect[T]): Action[T, When]", "member" : "work.martins.simon.expect.core.actions.Send.flatMap", "link" : "work\/martins\/simon\/expect\/core\/actions\/Send.html#flatMap[T](f:R=>work.martins.simon.expect.core.Expect[T]):work.martins.simon.expect.core.actions.Action[T,work.martins.simon.expect.core.When]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (R) ⇒ T): Action[T, When]", "member" : "work.martins.simon.expect.core.actions.Send.map", "link" : "work\/martins\/simon\/expect\/core\/actions\/Send.html#map[T](f:R=>T):work.martins.simon.expect.core.actions.Action[T,work.martins.simon.expect.core.When]", "kind" : "def"}, {"label" : "execute", "tail" : "(when: When[R], process: RichProcess, intermediateResult: IntermediateResult[R]): IntermediateResult[R]", "member" : "work.martins.simon.expect.core.actions.Send.execute", "link" : "work\/martins\/simon\/expect\/core\/actions\/Send.html#execute(when:work.martins.simon.expect.core.When[R],process:work.martins.simon.expect.core.RichProcess,intermediateResult:work.martins.simon.expect.core.IntermediateResult[R]):work.martins.simon.expect.core.IntermediateResult[R]", "kind" : "def"}, {"member" : "work.martins.simon.expect.core.actions.Send#<init>", "error" : "unsupported entity"}, {"label" : "text", "tail" : ": String", "member" : "work.martins.simon.expect.core.actions.Send.text", "link" : "work\/martins\/simon\/expect\/core\/actions\/Send.html#text:String", "kind" : "val"}, {"label" : "pfNotDefined", "tail" : "(r: R): T", "member" : "work.martins.simon.expect.core.actions.Action.pfNotDefined", "link" : "work\/martins\/simon\/expect\/core\/actions\/Send.html#pfNotDefined[T](r:R):T", "kind" : "def"}, {"label" : "=\/>", "tail" : "", "member" : "work.martins.simon.expect.core.actions.Action.=\/>", "link" : "work\/martins\/simon\/expect\/core\/actions\/Send.html#=\/>[-A,+B]=PartialFunction[A,B]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "work\/martins\/simon\/expect\/core\/actions\/Send.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "work\/martins\/simon\/expect\/core\/actions\/Send.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "work\/martins\/simon\/expect\/core\/actions\/Send.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "work\/martins\/simon\/expect\/core\/actions\/Send.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "work\/martins\/simon\/expect\/core\/actions\/Send.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "work\/martins\/simon\/expect\/core\/actions\/Send.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "work\/martins\/simon\/expect\/core\/actions\/Send.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/actions\/Send.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/actions\/Send.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/actions\/Send.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "work\/martins\/simon\/expect\/core\/actions\/Send.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "work\/martins\/simon\/expect\/core\/actions\/Send.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "work\/martins\/simon\/expect\/core\/actions\/Send.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "work\/martins\/simon\/expect\/core\/actions\/Send.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "work\/martins\/simon\/expect\/core\/actions\/Send.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "work\/martins\/simon\/expect\/core\/actions\/Send.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "work\/martins\/simon\/expect\/core\/actions\/Send.html", "kind" : "case class"}, {"name" : "work.martins.simon.expect.core.actions.Sendln", "shortDescription" : "", "object" : "work\/martins\/simon\/expect\/core\/actions\/Sendln$.html", "members_object" : [{"label" : "apply", "tail" : "(text: String): Send[R]", "member" : "work.martins.simon.expect.core.actions.Sendln.apply", "link" : "work\/martins\/simon\/expect\/core\/actions\/Sendln$.html#apply[R](text:String):work.martins.simon.expect.core.actions.Send[R]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "work\/martins\/simon\/expect\/core\/actions\/Sendln$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "work\/martins\/simon\/expect\/core\/actions\/Sendln$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "work\/martins\/simon\/expect\/core\/actions\/Sendln$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "work\/martins\/simon\/expect\/core\/actions\/Sendln$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "work\/martins\/simon\/expect\/core\/actions\/Sendln$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "work\/martins\/simon\/expect\/core\/actions\/Sendln$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "work\/martins\/simon\/expect\/core\/actions\/Sendln$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/actions\/Sendln$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/actions\/Sendln$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/actions\/Sendln$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "work\/martins\/simon\/expect\/core\/actions\/Sendln$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "work\/martins\/simon\/expect\/core\/actions\/Sendln$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "work\/martins\/simon\/expect\/core\/actions\/Sendln$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "work\/martins\/simon\/expect\/core\/actions\/Sendln$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "work\/martins\/simon\/expect\/core\/actions\/Sendln$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "work\/martins\/simon\/expect\/core\/actions\/Sendln$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "work\/martins\/simon\/expect\/core\/actions\/Sendln$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "work\/martins\/simon\/expect\/core\/actions\/Sendln$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "work\/martins\/simon\/expect\/core\/actions\/Sendln$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "work.martins.simon.expect.core.actions.SendlnWithRegex", "shortDescription" : "", "object" : "work\/martins\/simon\/expect\/core\/actions\/SendlnWithRegex$.html", "members_object" : [{"label" : "apply", "tail" : "(text: (Match) ⇒ String): SendWithRegex[R]", "member" : "work.martins.simon.expect.core.actions.SendlnWithRegex.apply", "link" : "work\/martins\/simon\/expect\/core\/actions\/SendlnWithRegex$.html#apply[R](text:util.matching.Regex.Match=>String):work.martins.simon.expect.core.actions.SendWithRegex[R]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "work\/martins\/simon\/expect\/core\/actions\/SendlnWithRegex$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "work\/martins\/simon\/expect\/core\/actions\/SendlnWithRegex$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "work\/martins\/simon\/expect\/core\/actions\/SendlnWithRegex$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "work\/martins\/simon\/expect\/core\/actions\/SendlnWithRegex$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "work\/martins\/simon\/expect\/core\/actions\/SendlnWithRegex$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "work\/martins\/simon\/expect\/core\/actions\/SendlnWithRegex$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "work\/martins\/simon\/expect\/core\/actions\/SendlnWithRegex$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/actions\/SendlnWithRegex$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/actions\/SendlnWithRegex$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/actions\/SendlnWithRegex$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "work\/martins\/simon\/expect\/core\/actions\/SendlnWithRegex$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "work\/martins\/simon\/expect\/core\/actions\/SendlnWithRegex$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "work\/martins\/simon\/expect\/core\/actions\/SendlnWithRegex$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "work\/martins\/simon\/expect\/core\/actions\/SendlnWithRegex$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "work\/martins\/simon\/expect\/core\/actions\/SendlnWithRegex$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "work\/martins\/simon\/expect\/core\/actions\/SendlnWithRegex$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "work\/martins\/simon\/expect\/core\/actions\/SendlnWithRegex$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "work\/martins\/simon\/expect\/core\/actions\/SendlnWithRegex$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "work\/martins\/simon\/expect\/core\/actions\/SendlnWithRegex$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "work.martins.simon.expect.core.actions.SendWithRegex", "shortDescription" : "When this action is executed the result of evaluating text will be sent to the stdIn of the underlying process.", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "work\/martins\/simon\/expect\/core\/actions\/SendWithRegex.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "work\/martins\/simon\/expect\/core\/actions\/SendWithRegex.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SendWithRegex[R]) ⇒ Boolean, msg: ⇒ Any): SendWithRegex[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/actions\/SendWithRegex.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SendWithRegex[R]) ⇒ Boolean): SendWithRegex[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/actions\/SendWithRegex.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): SendWithRegex[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/actions\/SendWithRegex.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): SendWithRegex[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/actions\/SendWithRegex.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (SendWithRegex[R], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "work\/martins\/simon\/expect\/core\/actions\/SendWithRegex.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (SendWithRegex[R], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "work\/martins\/simon\/expect\/core\/actions\/SendWithRegex.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "structurallyEquals", "tail" : "(other: Action[R, WW]): Boolean", "member" : "work.martins.simon.expect.core.actions.SendWithRegex.structurallyEquals", "link" : "work\/martins\/simon\/expect\/core\/actions\/SendWithRegex.html#structurallyEquals[WW[X]<:work.martins.simon.expect.core.RegexWhen[X]](other:work.martins.simon.expect.core.actions.Action[R,WW]):Boolean", "kind" : "def"}, {"label" : "transform", "tail" : "(flatMapPF: =\/>[R, Expect[T]])(mapPF: =\/>[R, T]): Action[T, RegexWhen]", "member" : "work.martins.simon.expect.core.actions.SendWithRegex.transform", "link" : "work\/martins\/simon\/expect\/core\/actions\/SendWithRegex.html#transform[T](flatMapPF:SendWithRegex.this.=\/>[R,work.martins.simon.expect.core.Expect[T]])(mapPF:SendWithRegex.this.=\/>[R,T]):work.martins.simon.expect.core.actions.Action[T,work.martins.simon.expect.core.RegexWhen]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (R) ⇒ Expect[T]): Action[T, RegexWhen]", "member" : "work.martins.simon.expect.core.actions.SendWithRegex.flatMap", "link" : "work\/martins\/simon\/expect\/core\/actions\/SendWithRegex.html#flatMap[T](f:R=>work.martins.simon.expect.core.Expect[T]):work.martins.simon.expect.core.actions.Action[T,work.martins.simon.expect.core.RegexWhen]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (R) ⇒ T): Action[T, RegexWhen]", "member" : "work.martins.simon.expect.core.actions.SendWithRegex.map", "link" : "work\/martins\/simon\/expect\/core\/actions\/SendWithRegex.html#map[T](f:R=>T):work.martins.simon.expect.core.actions.Action[T,work.martins.simon.expect.core.RegexWhen]", "kind" : "def"}, {"label" : "execute", "tail" : "(when: RegexWhen[R], process: RichProcess, intermediateResult: IntermediateResult[R]): IntermediateResult[R]", "member" : "work.martins.simon.expect.core.actions.SendWithRegex.execute", "link" : "work\/martins\/simon\/expect\/core\/actions\/SendWithRegex.html#execute(when:work.martins.simon.expect.core.RegexWhen[R],process:work.martins.simon.expect.core.RichProcess,intermediateResult:work.martins.simon.expect.core.IntermediateResult[R]):work.martins.simon.expect.core.IntermediateResult[R]", "kind" : "def"}, {"member" : "work.martins.simon.expect.core.actions.SendWithRegex#<init>", "error" : "unsupported entity"}, {"label" : "text", "tail" : ": (Match) ⇒ String", "member" : "work.martins.simon.expect.core.actions.SendWithRegex.text", "link" : "work\/martins\/simon\/expect\/core\/actions\/SendWithRegex.html#text:util.matching.Regex.Match=>String", "kind" : "val"}, {"label" : "pfNotDefined", "tail" : "(r: R): T", "member" : "work.martins.simon.expect.core.actions.Action.pfNotDefined", "link" : "work\/martins\/simon\/expect\/core\/actions\/SendWithRegex.html#pfNotDefined[T](r:R):T", "kind" : "def"}, {"label" : "=\/>", "tail" : "", "member" : "work.martins.simon.expect.core.actions.Action.=\/>", "link" : "work\/martins\/simon\/expect\/core\/actions\/SendWithRegex.html#=\/>[-A,+B]=PartialFunction[A,B]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "work\/martins\/simon\/expect\/core\/actions\/SendWithRegex.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "work\/martins\/simon\/expect\/core\/actions\/SendWithRegex.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "work\/martins\/simon\/expect\/core\/actions\/SendWithRegex.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "work\/martins\/simon\/expect\/core\/actions\/SendWithRegex.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "work\/martins\/simon\/expect\/core\/actions\/SendWithRegex.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "work\/martins\/simon\/expect\/core\/actions\/SendWithRegex.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "work\/martins\/simon\/expect\/core\/actions\/SendWithRegex.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/actions\/SendWithRegex.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/actions\/SendWithRegex.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/actions\/SendWithRegex.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "work\/martins\/simon\/expect\/core\/actions\/SendWithRegex.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "work\/martins\/simon\/expect\/core\/actions\/SendWithRegex.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "work\/martins\/simon\/expect\/core\/actions\/SendWithRegex.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "work\/martins\/simon\/expect\/core\/actions\/SendWithRegex.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "work\/martins\/simon\/expect\/core\/actions\/SendWithRegex.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "work\/martins\/simon\/expect\/core\/actions\/SendWithRegex.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "work\/martins\/simon\/expect\/core\/actions\/SendWithRegex.html", "kind" : "case class"}], "work.martins.simon.expect.dsl" : [{"name" : "work.martins.simon.expect.dsl.Expect", "shortDescription" : "", "members_class" : [{"label" : "structurallyEquals", "tail" : "(other: core.Expect[R]): Boolean", "member" : "work.martins.simon.expect.dsl.dslToCoreExpect.structurallyEquals", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html#structurallyEquals(other:work.martins.simon.expect.core.Expect[R]):Boolean", "kind" : "def"}, {"label" : "transform", "tail" : "(flatMapPF: PartialFunction[R, core.Expect[T]])(mapPF: PartialFunction[R, T]): core.Expect[T]", "member" : "work.martins.simon.expect.dsl.dslToCoreExpect.transform", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html#transform[T](flatMapPF:PartialFunction[R,work.martins.simon.expect.core.Expect[T]])(mapPF:PartialFunction[R,T]):work.martins.simon.expect.core.Expect[T]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (R) ⇒ core.Expect[T]): core.Expect[T]", "member" : "work.martins.simon.expect.dsl.dslToCoreExpect.flatMap", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html#flatMap[T](f:R=>work.martins.simon.expect.core.Expect[T]):work.martins.simon.expect.core.Expect[T]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (R) ⇒ T): core.Expect[T]", "member" : "work.martins.simon.expect.dsl.dslToCoreExpect.map", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html#map[T](f:R=>T):work.martins.simon.expect.core.Expect[T]", "kind" : "def"}, {"label" : "run", "tail" : "(richProcess: RichProcess)(ex: ExecutionContext): Future[R]", "member" : "work.martins.simon.expect.dsl.dslToCoreExpect.run", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html#run(richProcess:work.martins.simon.expect.core.RichProcess)(implicitex:scala.concurrent.ExecutionContext):scala.concurrent.Future[R]", "kind" : "def"}, {"label" : "run", "tail" : "(settings: Settings)(ex: ExecutionContext): Future[R]", "member" : "work.martins.simon.expect.dsl.dslToCoreExpect.run", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html#run(settings:work.martins.simon.expect.Settings)(implicitex:scala.concurrent.ExecutionContext):scala.concurrent.Future[R]", "kind" : "def"}, {"label" : "run", "tail" : "(timeout: FiniteDuration, charset: Charset, bufferSize: Int, redirectStdErrToStdOut: Boolean)(ex: ExecutionContext): Future[R]", "member" : "work.martins.simon.expect.dsl.dslToCoreExpect.run", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html#run(timeout:scala.concurrent.duration.FiniteDuration,charset:java.nio.charset.Charset,bufferSize:Int,redirectStdErrToStdOut:Boolean)(implicitex:scala.concurrent.ExecutionContext):scala.concurrent.Future[R]", "kind" : "def"}, {"label" : "expectBlocks", "tail" : ": ExpectBlock[R]*", "member" : "work.martins.simon.expect.dsl.dslToCoreExpect.expectBlocks", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html#expectBlocks:work.martins.simon.expect.core.ExpectBlock[R]*", "kind" : "val"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Expect[R]) ⇒ Boolean, msg: ⇒ Any): Expect[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Expect[R]) ⇒ Boolean): Expect[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Expect[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Expect[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Expect[R], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Expect[R], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "work.martins.simon.expect.dsl.Expect.hashCode", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(other: Any): Boolean", "member" : "work.martins.simon.expect.dsl.Expect.equals", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html#equals(other:Any):Boolean", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "work.martins.simon.expect.dsl.Expect.toString", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html#toString():String", "kind" : "def"}, {"label" : "toCore", "tail" : "(): core.Expect[R]", "member" : "work.martins.simon.expect.dsl.Expect.toCore", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html#toCore:work.martins.simon.expect.core.Expect[R]", "kind" : "def"}, {"label" : "addActions", "tail" : "(block: (Expect[R]) ⇒ Unit): Unit", "member" : "work.martins.simon.expect.dsl.Expect.addActions", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html#addActions(block:work.martins.simon.expect.dsl.Expect[R]=>Unit):Unit", "kind" : "def"}, {"label" : "exit", "tail" : "(): Unit", "member" : "work.martins.simon.expect.dsl.Expect.exit", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html#exit():Unit", "kind" : "def"}, {"label" : "returningExpect", "tail" : "(result: (Match) ⇒ core.Expect[R]): Unit", "member" : "work.martins.simon.expect.dsl.Expect.returningExpect", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html#returningExpect(result:util.matching.Regex.Match=>work.martins.simon.expect.core.Expect[R]):Unit", "kind" : "def"}, {"label" : "returningExpect", "tail" : "(result: ⇒ core.Expect[R]): Unit", "member" : "work.martins.simon.expect.dsl.Expect.returningExpect", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html#returningExpect(result:=>work.martins.simon.expect.core.Expect[R]):Unit", "kind" : "def"}, {"label" : "returning", "tail" : "(result: (Match) ⇒ R): Unit", "member" : "work.martins.simon.expect.dsl.Expect.returning", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html#returning(result:util.matching.Regex.Match=>R):Unit", "kind" : "def"}, {"label" : "returning", "tail" : "(result: ⇒ R): Unit", "member" : "work.martins.simon.expect.dsl.Expect.returning", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html#returning(result:=>R):Unit", "kind" : "def"}, {"label" : "sendln", "tail" : "(text: (Match) ⇒ String): Unit", "member" : "work.martins.simon.expect.dsl.Expect.sendln", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html#sendln(text:util.matching.Regex.Match=>String):Unit", "kind" : "def"}, {"label" : "sendln", "tail" : "(text: String): Unit", "member" : "work.martins.simon.expect.dsl.Expect.sendln", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html#sendln(text:String):Unit", "kind" : "def"}, {"label" : "send", "tail" : "(text: (Match) ⇒ String): Unit", "member" : "work.martins.simon.expect.dsl.Expect.send", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html#send(text:util.matching.Regex.Match=>String):Unit", "kind" : "def"}, {"label" : "send", "tail" : "(text: String): Unit", "member" : "work.martins.simon.expect.dsl.Expect.send", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html#send(text:String):Unit", "kind" : "def"}, {"label" : "addWhens", "tail" : "(block: (Expect[R]) ⇒ Unit): Unit", "member" : "work.martins.simon.expect.dsl.Expect.addWhens", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html#addWhens(block:work.martins.simon.expect.dsl.Expect[R]=>Unit):Unit", "kind" : "def"}, {"label" : "addWhen", "tail" : "(block: (Expect[R]) ⇒ Unit): Unit", "member" : "work.martins.simon.expect.dsl.Expect.addWhen", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html#addWhen(block:work.martins.simon.expect.dsl.Expect[R]=>Unit):Unit", "kind" : "def"}, {"label" : "when", "tail" : "(pattern: Timeout.type)(f: ⇒ Unit): Unit", "member" : "work.martins.simon.expect.dsl.Expect.when", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html#when(pattern:work.martins.simon.expect.Timeout.type)(f:=>Unit):Unit", "kind" : "def"}, {"label" : "when", "tail" : "(pattern: EndOfFile.type)(f: ⇒ Unit): Unit", "member" : "work.martins.simon.expect.dsl.Expect.when", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html#when(pattern:work.martins.simon.expect.EndOfFile.type)(f:=>Unit):Unit", "kind" : "def"}, {"label" : "when", "tail" : "(pattern: Regex)(f: ⇒ Unit): Unit", "member" : "work.martins.simon.expect.dsl.Expect.when", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html#when(pattern:scala.util.matching.Regex)(f:=>Unit):Unit", "kind" : "def"}, {"label" : "when", "tail" : "(pattern: String)(f: ⇒ Unit): Unit", "member" : "work.martins.simon.expect.dsl.Expect.when", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html#when(pattern:String)(f:=>Unit):Unit", "kind" : "def"}, {"label" : "addExpectBlock", "tail" : "(block: (Expect[R]) ⇒ Unit): Unit", "member" : "work.martins.simon.expect.dsl.Expect.addExpectBlock", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html#addExpectBlock(block:work.martins.simon.expect.dsl.Expect[R]=>Unit):Unit", "kind" : "def"}, {"label" : "expect", "tail" : "(pattern: Timeout.type)(f: ⇒ Unit): Unit", "member" : "work.martins.simon.expect.dsl.Expect.expect", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html#expect(pattern:work.martins.simon.expect.Timeout.type)(f:=>Unit):Unit", "kind" : "def"}, {"label" : "expect", "tail" : "(pattern: EndOfFile.type)(f: ⇒ Unit): Unit", "member" : "work.martins.simon.expect.dsl.Expect.expect", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html#expect(pattern:work.martins.simon.expect.EndOfFile.type)(f:=>Unit):Unit", "kind" : "def"}, {"label" : "expect", "tail" : "(pattern: Regex)(f: ⇒ Unit): Unit", "member" : "work.martins.simon.expect.dsl.Expect.expect", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html#expect(pattern:scala.util.matching.Regex)(f:=>Unit):Unit", "kind" : "def"}, {"label" : "expect", "tail" : "(pattern: String)(f: ⇒ Unit): Unit", "member" : "work.martins.simon.expect.dsl.Expect.expect", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html#expect(pattern:String)(f:=>Unit):Unit", "kind" : "def"}, {"label" : "expect", "tail" : "(f: ⇒ Unit): Unit", "member" : "work.martins.simon.expect.dsl.Expect.expect", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html#expect(f:=>Unit):Unit", "kind" : "def"}, {"label" : "when", "tail" : ": Option[When[R]]", "member" : "work.martins.simon.expect.dsl.Expect.when", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html#when:Option[work.martins.simon.expect.fluent.When[R]]", "kind" : "var"}, {"label" : "expectBlock", "tail" : ": Option[ExpectBlock[R]]", "member" : "work.martins.simon.expect.dsl.Expect.expectBlock", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html#expectBlock:Option[work.martins.simon.expect.fluent.ExpectBlock[R]]", "kind" : "var"}, {"member" : "work.martins.simon.expect.dsl.Expect#<init>", "error" : "unsupported entity"}, {"member" : "work.martins.simon.expect.dsl.Expect#<init>", "error" : "unsupported entity"}, {"member" : "work.martins.simon.expect.dsl.Expect#<init>", "error" : "unsupported entity"}, {"member" : "work.martins.simon.expect.dsl.Expect#<init>", "error" : "unsupported entity"}, {"member" : "work.martins.simon.expect.dsl.Expect#<init>", "error" : "unsupported entity"}, {"label" : "settings", "tail" : ": Settings", "member" : "work.martins.simon.expect.dsl.Expect.settings", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html#settings:work.martins.simon.expect.Settings", "kind" : "val"}, {"label" : "defaultValue", "tail" : ": R", "member" : "work.martins.simon.expect.dsl.Expect.defaultValue", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html#defaultValue:R", "kind" : "val"}, {"label" : "command", "tail" : ": Seq[String]", "member" : "work.martins.simon.expect.dsl.Expect.command", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html#command:Seq[String]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "work\/martins\/simon\/expect\/dsl\/Expect.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "work\/martins\/simon\/expect\/dsl\/Expect.html", "kind" : "class"}], "work" : [], "work.martins.simon" : [], "work.martins" : [], "work.martins.simon.expect" : [{"name" : "work.martins.simon.expect.EndOfFile", "shortDescription" : "", "object" : "work\/martins\/simon\/expect\/EndOfFile$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "work\/martins\/simon\/expect\/EndOfFile$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "work\/martins\/simon\/expect\/EndOfFile$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "work\/martins\/simon\/expect\/EndOfFile$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "work\/martins\/simon\/expect\/EndOfFile$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "work\/martins\/simon\/expect\/EndOfFile$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "work\/martins\/simon\/expect\/EndOfFile$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "work\/martins\/simon\/expect\/EndOfFile$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/EndOfFile$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/EndOfFile$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/EndOfFile$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "work\/martins\/simon\/expect\/EndOfFile$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "work\/martins\/simon\/expect\/EndOfFile$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "work\/martins\/simon\/expect\/EndOfFile$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "work\/martins\/simon\/expect\/EndOfFile$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "work\/martins\/simon\/expect\/EndOfFile$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "work\/martins\/simon\/expect\/EndOfFile$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "work\/martins\/simon\/expect\/EndOfFile$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "work\/martins\/simon\/expect\/EndOfFile$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "work\/martins\/simon\/expect\/EndOfFile$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "work.martins.simon.expect.Settings", "shortDescription" : "This class holds all the settings that parameterize expect.", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "work\/martins\/simon\/expect\/Settings.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "work\/martins\/simon\/expect\/Settings.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Settings) ⇒ Boolean, msg: ⇒ Any): Settings", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/Settings.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Settings) ⇒ Boolean): Settings", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/Settings.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Settings", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/Settings.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Settings", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/Settings.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Settings, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "work\/martins\/simon\/expect\/Settings.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Settings, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "work\/martins\/simon\/expect\/Settings.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "work.martins.simon.expect.Settings.toString", "link" : "work\/martins\/simon\/expect\/Settings.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "work.martins.simon.expect.Settings.hashCode", "link" : "work\/martins\/simon\/expect\/Settings.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(other: Any): Boolean", "member" : "work.martins.simon.expect.Settings.equals", "link" : "work\/martins\/simon\/expect\/Settings.html#equals(other:Any):Boolean", "kind" : "def"}, {"label" : "redirectStdErrToStdOut", "tail" : ": Boolean", "member" : "work.martins.simon.expect.Settings.redirectStdErrToStdOut", "link" : "work\/martins\/simon\/expect\/Settings.html#redirectStdErrToStdOut:Boolean", "kind" : "val"}, {"label" : "bufferSize", "tail" : ": Int", "member" : "work.martins.simon.expect.Settings.bufferSize", "link" : "work\/martins\/simon\/expect\/Settings.html#bufferSize:Int", "kind" : "val"}, {"label" : "charset", "tail" : ": Charset", "member" : "work.martins.simon.expect.Settings.charset", "link" : "work\/martins\/simon\/expect\/Settings.html#charset:java.nio.charset.Charset", "kind" : "val"}, {"label" : "timeout", "tail" : ": FiniteDuration", "member" : "work.martins.simon.expect.Settings.timeout", "link" : "work\/martins\/simon\/expect\/Settings.html#timeout:scala.concurrent.duration.FiniteDuration", "kind" : "val"}, {"label" : "scalaExpectConfig", "tail" : ": Config", "member" : "work.martins.simon.expect.Settings.scalaExpectConfig", "link" : "work\/martins\/simon\/expect\/Settings.html#scalaExpectConfig:com.typesafe.config.Config", "kind" : "val"}, {"member" : "work.martins.simon.expect.Settings#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "work\/martins\/simon\/expect\/Settings.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "work\/martins\/simon\/expect\/Settings.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "work\/martins\/simon\/expect\/Settings.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "work\/martins\/simon\/expect\/Settings.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "work\/martins\/simon\/expect\/Settings.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "work\/martins\/simon\/expect\/Settings.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "work\/martins\/simon\/expect\/Settings.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/Settings.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/Settings.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/Settings.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "work\/martins\/simon\/expect\/Settings.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "work\/martins\/simon\/expect\/Settings.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "work\/martins\/simon\/expect\/Settings.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "work\/martins\/simon\/expect\/Settings.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "work\/martins\/simon\/expect\/Settings.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "work\/martins\/simon\/expect\/Settings.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "work\/martins\/simon\/expect\/Settings.html", "kind" : "class"}, {"name" : "work.martins.simon.expect.StringUtils", "shortDescription" : "", "object" : "work\/martins\/simon\/expect\/StringUtils$.html", "members_object" : [{"label" : "IndentableString", "tail" : "", "member" : "work.martins.simon.expect.StringUtils.IndentableString", "link" : "work\/martins\/simon\/expect\/StringUtils$.html#IndentableStringextendsAnyRef", "kind" : "implicit class"}, {"label" : "splitBySpaces", "tail" : "(command: String): Seq[String]", "member" : "work.martins.simon.expect.StringUtils.splitBySpaces", "link" : "work\/martins\/simon\/expect\/StringUtils$.html#splitBySpaces(command:String):Seq[String]", "kind" : "def"}, {"label" : "escape", "tail" : "(raw: String): String", "member" : "work.martins.simon.expect.StringUtils.escape", "link" : "work\/martins\/simon\/expect\/StringUtils$.html#escape(raw:String):String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "work\/martins\/simon\/expect\/StringUtils$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "work\/martins\/simon\/expect\/StringUtils$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "work\/martins\/simon\/expect\/StringUtils$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "work\/martins\/simon\/expect\/StringUtils$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "work\/martins\/simon\/expect\/StringUtils$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "work\/martins\/simon\/expect\/StringUtils$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "work\/martins\/simon\/expect\/StringUtils$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/StringUtils$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/StringUtils$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/StringUtils$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "work\/martins\/simon\/expect\/StringUtils$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "work\/martins\/simon\/expect\/StringUtils$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "work\/martins\/simon\/expect\/StringUtils$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "work\/martins\/simon\/expect\/StringUtils$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "work\/martins\/simon\/expect\/StringUtils$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "work\/martins\/simon\/expect\/StringUtils$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "work\/martins\/simon\/expect\/StringUtils$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "work\/martins\/simon\/expect\/StringUtils$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "work\/martins\/simon\/expect\/StringUtils$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "work.martins.simon.expect.Timeout", "shortDescription" : "", "object" : "work\/martins\/simon\/expect\/Timeout$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "work\/martins\/simon\/expect\/Timeout$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "work\/martins\/simon\/expect\/Timeout$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "work\/martins\/simon\/expect\/Timeout$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "work\/martins\/simon\/expect\/Timeout$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "work\/martins\/simon\/expect\/Timeout$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "work\/martins\/simon\/expect\/Timeout$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "work\/martins\/simon\/expect\/Timeout$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/Timeout$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/Timeout$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/Timeout$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "work\/martins\/simon\/expect\/Timeout$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "work\/martins\/simon\/expect\/Timeout$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "work\/martins\/simon\/expect\/Timeout$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "work\/martins\/simon\/expect\/Timeout$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "work\/martins\/simon\/expect\/Timeout$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "work\/martins\/simon\/expect\/Timeout$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "work\/martins\/simon\/expect\/Timeout$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "work\/martins\/simon\/expect\/Timeout$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "work\/martins\/simon\/expect\/Timeout$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "work.martins.simon.expect.core" : [{"name" : "work.martins.simon.expect.core.ChangeToNewExpect", "shortDescription" : "", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "work\/martins\/simon\/expect\/core\/ChangeToNewExpect.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "work\/martins\/simon\/expect\/core\/ChangeToNewExpect.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ChangeToNewExpect[R]) ⇒ Boolean, msg: ⇒ Any): ChangeToNewExpect[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/ChangeToNewExpect.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ChangeToNewExpect[R]) ⇒ Boolean): ChangeToNewExpect[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/ChangeToNewExpect.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ChangeToNewExpect[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/ChangeToNewExpect.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ChangeToNewExpect[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/ChangeToNewExpect.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ChangeToNewExpect[R], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "work\/martins\/simon\/expect\/core\/ChangeToNewExpect.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ChangeToNewExpect[R], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "work\/martins\/simon\/expect\/core\/ChangeToNewExpect.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "work.martins.simon.expect.core.ChangeToNewExpect#<init>", "error" : "unsupported entity"}, {"label" : "expect", "tail" : ": Expect[R]", "member" : "work.martins.simon.expect.core.ChangeToNewExpect.expect", "link" : "work\/martins\/simon\/expect\/core\/ChangeToNewExpect.html#expect:work.martins.simon.expect.core.Expect[R]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "work\/martins\/simon\/expect\/core\/ChangeToNewExpect.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "work\/martins\/simon\/expect\/core\/ChangeToNewExpect.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "work\/martins\/simon\/expect\/core\/ChangeToNewExpect.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "work\/martins\/simon\/expect\/core\/ChangeToNewExpect.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "work\/martins\/simon\/expect\/core\/ChangeToNewExpect.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "work\/martins\/simon\/expect\/core\/ChangeToNewExpect.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "work\/martins\/simon\/expect\/core\/ChangeToNewExpect.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/ChangeToNewExpect.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/ChangeToNewExpect.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/ChangeToNewExpect.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "work\/martins\/simon\/expect\/core\/ChangeToNewExpect.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "work\/martins\/simon\/expect\/core\/ChangeToNewExpect.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "work\/martins\/simon\/expect\/core\/ChangeToNewExpect.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "work\/martins\/simon\/expect\/core\/ChangeToNewExpect.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "work\/martins\/simon\/expect\/core\/ChangeToNewExpect.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "work\/martins\/simon\/expect\/core\/ChangeToNewExpect.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "work\/martins\/simon\/expect\/core\/ChangeToNewExpect.html", "kind" : "case class"}, {"name" : "work.martins.simon.expect.core.Continue", "shortDescription" : "", "object" : "work\/martins\/simon\/expect\/core\/Continue$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "work\/martins\/simon\/expect\/core\/Continue$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "work\/martins\/simon\/expect\/core\/Continue$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "work\/martins\/simon\/expect\/core\/Continue$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "work\/martins\/simon\/expect\/core\/Continue$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "work\/martins\/simon\/expect\/core\/Continue$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "work\/martins\/simon\/expect\/core\/Continue$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "work\/martins\/simon\/expect\/core\/Continue$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/Continue$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/Continue$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/Continue$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "work\/martins\/simon\/expect\/core\/Continue$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "work\/martins\/simon\/expect\/core\/Continue$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "work\/martins\/simon\/expect\/core\/Continue$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "work\/martins\/simon\/expect\/core\/Continue$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "work\/martins\/simon\/expect\/core\/Continue$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "work\/martins\/simon\/expect\/core\/Continue$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "work\/martins\/simon\/expect\/core\/Continue$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "work.martins.simon.expect.core.EndOfFileWhen", "shortDescription" : "", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "work\/martins\/simon\/expect\/core\/EndOfFileWhen.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "work\/martins\/simon\/expect\/core\/EndOfFileWhen.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (EndOfFileWhen[R]) ⇒ Boolean, msg: ⇒ Any): EndOfFileWhen[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/EndOfFileWhen.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (EndOfFileWhen[R]) ⇒ Boolean): EndOfFileWhen[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/EndOfFileWhen.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): EndOfFileWhen[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/EndOfFileWhen.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): EndOfFileWhen[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/EndOfFileWhen.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (EndOfFileWhen[R], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "work\/martins\/simon\/expect\/core\/EndOfFileWhen.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (EndOfFileWhen[R], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "work\/martins\/simon\/expect\/core\/EndOfFileWhen.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "patternString", "tail" : ": String", "member" : "work.martins.simon.expect.core.EndOfFileWhen.patternString", "link" : "work\/martins\/simon\/expect\/core\/EndOfFileWhen.html#patternString:String", "kind" : "val"}, {"label" : "structurallyEquals", "tail" : "(other: When[R]): Boolean", "member" : "work.martins.simon.expect.core.EndOfFileWhen.structurallyEquals", "link" : "work\/martins\/simon\/expect\/core\/EndOfFileWhen.html#structurallyEquals(other:work.martins.simon.expect.core.When[R]):Boolean", "kind" : "def"}, {"label" : "withActions", "tail" : "(actions: Seq[Action[T, This]]): EndOfFileWhen[T]", "member" : "work.martins.simon.expect.core.EndOfFileWhen.withActions", "link" : "work\/martins\/simon\/expect\/core\/EndOfFileWhen.html#withActions[T](actions:Seq[work.martins.simon.expect.core.actions.Action[T,EndOfFileWhen.this.This]]):work.martins.simon.expect.core.EndOfFileWhen[T]", "kind" : "def"}, {"label" : "This", "tail" : "", "member" : "work.martins.simon.expect.core.EndOfFileWhen.This", "link" : "work\/martins\/simon\/expect\/core\/EndOfFileWhen.html#This[X]=work.martins.simon.expect.core.EndOfFileWhen[X]", "kind" : "final type"}, {"member" : "work.martins.simon.expect.core.EndOfFileWhen#<init>", "error" : "unsupported entity"}, {"label" : "actions", "tail" : ": Action[R, EndOfFileWhen]*", "member" : "work.martins.simon.expect.core.EndOfFileWhen.actions", "link" : "work\/martins\/simon\/expect\/core\/EndOfFileWhen.html#actions:work.martins.simon.expect.core.actions.Action[R,work.martins.simon.expect.core.EndOfFileWhen]*", "kind" : "val"}, {"label" : "toString", "tail" : "(): String", "member" : "work.martins.simon.expect.core.When.toString", "link" : "work\/martins\/simon\/expect\/core\/EndOfFileWhen.html#toString():String", "kind" : "def"}, {"label" : "structurallyEqualActions", "tail" : "(other: When[R]): Boolean", "member" : "work.martins.simon.expect.core.When.structurallyEqualActions", "link" : "work\/martins\/simon\/expect\/core\/EndOfFileWhen.html#structurallyEqualActions(other:work.martins.simon.expect.core.When[R]):Boolean", "kind" : "def"}, {"label" : "execute", "tail" : "(process: RichProcess, intermediateResult: IntermediateResult[R]): IntermediateResult[R]", "member" : "work.martins.simon.expect.core.When.execute", "link" : "work\/martins\/simon\/expect\/core\/EndOfFileWhen.html#execute(process:work.martins.simon.expect.core.RichProcess,intermediateResult:work.martins.simon.expect.core.IntermediateResult[R]):work.martins.simon.expect.core.IntermediateResult[R]", "kind" : "def"}, {"label" : "trimToMatchedText", "tail" : "(output: String): String", "member" : "work.martins.simon.expect.core.When.trimToMatchedText", "link" : "work\/martins\/simon\/expect\/core\/EndOfFileWhen.html#trimToMatchedText(output:String):String", "kind" : "def"}, {"label" : "matches", "tail" : "(output: String): Boolean", "member" : "work.martins.simon.expect.core.When.matches", "link" : "work\/martins\/simon\/expect\/core\/EndOfFileWhen.html#matches(output:String):Boolean", "kind" : "def"}, {"label" : "logger", "tail" : ": Logger", "member" : "com.typesafe.scalalogging.LazyLogging.logger", "link" : "work\/martins\/simon\/expect\/core\/EndOfFileWhen.html#logger:com.typesafe.scalalogging.Logger", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "work\/martins\/simon\/expect\/core\/EndOfFileWhen.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "work\/martins\/simon\/expect\/core\/EndOfFileWhen.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "work\/martins\/simon\/expect\/core\/EndOfFileWhen.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "work\/martins\/simon\/expect\/core\/EndOfFileWhen.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "work\/martins\/simon\/expect\/core\/EndOfFileWhen.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "work\/martins\/simon\/expect\/core\/EndOfFileWhen.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "work\/martins\/simon\/expect\/core\/EndOfFileWhen.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/EndOfFileWhen.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/EndOfFileWhen.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/EndOfFileWhen.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "work\/martins\/simon\/expect\/core\/EndOfFileWhen.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "work\/martins\/simon\/expect\/core\/EndOfFileWhen.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "work\/martins\/simon\/expect\/core\/EndOfFileWhen.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "work\/martins\/simon\/expect\/core\/EndOfFileWhen.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "work\/martins\/simon\/expect\/core\/EndOfFileWhen.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "work\/martins\/simon\/expect\/core\/EndOfFileWhen.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "work\/martins\/simon\/expect\/core\/EndOfFileWhen.html", "kind" : "case class"}, {"name" : "work.martins.simon.expect.core.ExecutionAction", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "work\/martins\/simon\/expect\/core\/ExecutionAction.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "work\/martins\/simon\/expect\/core\/ExecutionAction.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ExecutionAction) ⇒ Boolean, msg: ⇒ Any): ExecutionAction", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/ExecutionAction.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ExecutionAction) ⇒ Boolean): ExecutionAction", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/ExecutionAction.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ExecutionAction", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/ExecutionAction.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ExecutionAction", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/ExecutionAction.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ExecutionAction, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "work\/martins\/simon\/expect\/core\/ExecutionAction.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ExecutionAction, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "work\/martins\/simon\/expect\/core\/ExecutionAction.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "work\/martins\/simon\/expect\/core\/ExecutionAction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "work\/martins\/simon\/expect\/core\/ExecutionAction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "work\/martins\/simon\/expect\/core\/ExecutionAction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "work\/martins\/simon\/expect\/core\/ExecutionAction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "work\/martins\/simon\/expect\/core\/ExecutionAction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "work\/martins\/simon\/expect\/core\/ExecutionAction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "work\/martins\/simon\/expect\/core\/ExecutionAction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/ExecutionAction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/ExecutionAction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/ExecutionAction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "work\/martins\/simon\/expect\/core\/ExecutionAction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "work\/martins\/simon\/expect\/core\/ExecutionAction.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "work\/martins\/simon\/expect\/core\/ExecutionAction.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "work\/martins\/simon\/expect\/core\/ExecutionAction.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "work\/martins\/simon\/expect\/core\/ExecutionAction.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "work\/martins\/simon\/expect\/core\/ExecutionAction.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "work\/martins\/simon\/expect\/core\/ExecutionAction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "work\/martins\/simon\/expect\/core\/ExecutionAction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "work\/martins\/simon\/expect\/core\/ExecutionAction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "work\/martins\/simon\/expect\/core\/ExecutionAction.html", "kind" : "trait"}, {"name" : "work.martins.simon.expect.core.Expect", "shortDescription" : "", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "work\/martins\/simon\/expect\/core\/Expect.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "work\/martins\/simon\/expect\/core\/Expect.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Expect[R]) ⇒ Boolean, msg: ⇒ Any): Expect[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/Expect.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Expect[R]) ⇒ Boolean): Expect[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/Expect.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Expect[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/Expect.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Expect[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/Expect.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Expect[R], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "work\/martins\/simon\/expect\/core\/Expect.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Expect[R], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "work\/martins\/simon\/expect\/core\/Expect.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "work.martins.simon.expect.core.Expect.hashCode", "link" : "work\/martins\/simon\/expect\/core\/Expect.html#hashCode():Int", "kind" : "def"}, {"label" : "structurallyEquals", "tail" : "(other: Expect[R]): Boolean", "member" : "work.martins.simon.expect.core.Expect.structurallyEquals", "link" : "work\/martins\/simon\/expect\/core\/Expect.html#structurallyEquals(other:work.martins.simon.expect.core.Expect[R]):Boolean", "kind" : "def"}, {"label" : "equals", "tail" : "(other: Any): Boolean", "member" : "work.martins.simon.expect.core.Expect.equals", "link" : "work\/martins\/simon\/expect\/core\/Expect.html#equals(other:Any):Boolean", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "work.martins.simon.expect.core.Expect.toString", "link" : "work\/martins\/simon\/expect\/core\/Expect.html#toString():String", "kind" : "def"}, {"label" : "transform", "tail" : "(flatMapPF: PartialFunction[R, Expect[T]])(mapPF: PartialFunction[R, T]): Expect[T]", "member" : "work.martins.simon.expect.core.Expect.transform", "link" : "work\/martins\/simon\/expect\/core\/Expect.html#transform[T](flatMapPF:PartialFunction[R,work.martins.simon.expect.core.Expect[T]])(mapPF:PartialFunction[R,T]):work.martins.simon.expect.core.Expect[T]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (R) ⇒ Expect[T]): Expect[T]", "member" : "work.martins.simon.expect.core.Expect.flatMap", "link" : "work\/martins\/simon\/expect\/core\/Expect.html#flatMap[T](f:R=>work.martins.simon.expect.core.Expect[T]):work.martins.simon.expect.core.Expect[T]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (R) ⇒ T): Expect[T]", "member" : "work.martins.simon.expect.core.Expect.map", "link" : "work\/martins\/simon\/expect\/core\/Expect.html#map[T](f:R=>T):work.martins.simon.expect.core.Expect[T]", "kind" : "def"}, {"label" : "run", "tail" : "(richProcess: RichProcess)(ex: ExecutionContext): Future[R]", "member" : "work.martins.simon.expect.core.Expect.run", "link" : "work\/martins\/simon\/expect\/core\/Expect.html#run(richProcess:work.martins.simon.expect.core.RichProcess)(implicitex:scala.concurrent.ExecutionContext):scala.concurrent.Future[R]", "kind" : "def"}, {"label" : "run", "tail" : "(settings: Settings)(ex: ExecutionContext): Future[R]", "member" : "work.martins.simon.expect.core.Expect.run", "link" : "work\/martins\/simon\/expect\/core\/Expect.html#run(settings:work.martins.simon.expect.Settings)(implicitex:scala.concurrent.ExecutionContext):scala.concurrent.Future[R]", "kind" : "def"}, {"label" : "run", "tail" : "(timeout: FiniteDuration, charset: Charset, bufferSize: Int, redirectStdErrToStdOut: Boolean)(ex: ExecutionContext): Future[R]", "member" : "work.martins.simon.expect.core.Expect.run", "link" : "work\/martins\/simon\/expect\/core\/Expect.html#run(timeout:scala.concurrent.duration.FiniteDuration,charset:java.nio.charset.Charset,bufferSize:Int,redirectStdErrToStdOut:Boolean)(implicitex:scala.concurrent.ExecutionContext):scala.concurrent.Future[R]", "kind" : "def"}, {"member" : "work.martins.simon.expect.core.Expect#<init>", "error" : "unsupported entity"}, {"member" : "work.martins.simon.expect.core.Expect#<init>", "error" : "unsupported entity"}, {"member" : "work.martins.simon.expect.core.Expect#<init>", "error" : "unsupported entity"}, {"member" : "work.martins.simon.expect.core.Expect#<init>", "error" : "unsupported entity"}, {"member" : "work.martins.simon.expect.core.Expect#<init>", "error" : "unsupported entity"}, {"label" : "expectBlocks", "tail" : ": ExpectBlock[R]*", "member" : "work.martins.simon.expect.core.Expect.expectBlocks", "link" : "work\/martins\/simon\/expect\/core\/Expect.html#expectBlocks:work.martins.simon.expect.core.ExpectBlock[R]*", "kind" : "val"}, {"label" : "settings", "tail" : ": Settings", "member" : "work.martins.simon.expect.core.Expect.settings", "link" : "work\/martins\/simon\/expect\/core\/Expect.html#settings:work.martins.simon.expect.Settings", "kind" : "val"}, {"label" : "defaultValue", "tail" : ": R", "member" : "work.martins.simon.expect.core.Expect.defaultValue", "link" : "work\/martins\/simon\/expect\/core\/Expect.html#defaultValue:R", "kind" : "val"}, {"label" : "command", "tail" : ": Seq[String]", "member" : "work.martins.simon.expect.core.Expect.command", "link" : "work\/martins\/simon\/expect\/core\/Expect.html#command:Seq[String]", "kind" : "val"}, {"label" : "logger", "tail" : ": Logger", "member" : "com.typesafe.scalalogging.LazyLogging.logger", "link" : "work\/martins\/simon\/expect\/core\/Expect.html#logger:com.typesafe.scalalogging.Logger", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "work\/martins\/simon\/expect\/core\/Expect.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "work\/martins\/simon\/expect\/core\/Expect.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "work\/martins\/simon\/expect\/core\/Expect.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "work\/martins\/simon\/expect\/core\/Expect.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "work\/martins\/simon\/expect\/core\/Expect.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "work\/martins\/simon\/expect\/core\/Expect.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "work\/martins\/simon\/expect\/core\/Expect.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/Expect.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/Expect.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/Expect.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "work\/martins\/simon\/expect\/core\/Expect.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "work\/martins\/simon\/expect\/core\/Expect.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "work\/martins\/simon\/expect\/core\/Expect.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "work\/martins\/simon\/expect\/core\/Expect.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "work\/martins\/simon\/expect\/core\/Expect.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "work\/martins\/simon\/expect\/core\/Expect.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "work\/martins\/simon\/expect\/core\/Expect.html", "kind" : "class"}, {"name" : "work.martins.simon.expect.core.ExpectBlock", "shortDescription" : "", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "work\/martins\/simon\/expect\/core\/ExpectBlock.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "work\/martins\/simon\/expect\/core\/ExpectBlock.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ExpectBlock[R]) ⇒ Boolean, msg: ⇒ Any): ExpectBlock[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/ExpectBlock.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ExpectBlock[R]) ⇒ Boolean): ExpectBlock[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/ExpectBlock.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ExpectBlock[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/ExpectBlock.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ExpectBlock[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/ExpectBlock.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ExpectBlock[R], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "work\/martins\/simon\/expect\/core\/ExpectBlock.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ExpectBlock[R], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "work\/martins\/simon\/expect\/core\/ExpectBlock.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "work.martins.simon.expect.core.ExpectBlock.hashCode", "link" : "work\/martins\/simon\/expect\/core\/ExpectBlock.html#hashCode():Int", "kind" : "def"}, {"label" : "structurallyEquals", "tail" : "(other: ExpectBlock[R]): Boolean", "member" : "work.martins.simon.expect.core.ExpectBlock.structurallyEquals", "link" : "work\/martins\/simon\/expect\/core\/ExpectBlock.html#structurallyEquals(other:work.martins.simon.expect.core.ExpectBlock[R]):Boolean", "kind" : "def"}, {"label" : "equals", "tail" : "(other: Any): Boolean", "member" : "work.martins.simon.expect.core.ExpectBlock.equals", "link" : "work\/martins\/simon\/expect\/core\/ExpectBlock.html#equals(other:Any):Boolean", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "work.martins.simon.expect.core.ExpectBlock.toString", "link" : "work\/martins\/simon\/expect\/core\/ExpectBlock.html#toString():String", "kind" : "def"}, {"label" : "run", "tail" : "(process: RichProcess, intermediateResult: IntermediateResult[R], expectID: String)(ex: ExecutionContext): Future[IntermediateResult[R]]", "member" : "work.martins.simon.expect.core.ExpectBlock.run", "link" : "work\/martins\/simon\/expect\/core\/ExpectBlock.html#run(process:work.martins.simon.expect.core.RichProcess,intermediateResult:work.martins.simon.expect.core.IntermediateResult[R],expectID:String)(implicitex:scala.concurrent.ExecutionContext):scala.concurrent.Future[work.martins.simon.expect.core.IntermediateResult[R]]", "kind" : "def"}, {"member" : "work.martins.simon.expect.core.ExpectBlock#<init>", "error" : "unsupported entity"}, {"label" : "whens", "tail" : ": When[R]*", "member" : "work.martins.simon.expect.core.ExpectBlock.whens", "link" : "work\/martins\/simon\/expect\/core\/ExpectBlock.html#whens:work.martins.simon.expect.core.When[R]*", "kind" : "val"}, {"label" : "logger", "tail" : ": Logger", "member" : "com.typesafe.scalalogging.LazyLogging.logger", "link" : "work\/martins\/simon\/expect\/core\/ExpectBlock.html#logger:com.typesafe.scalalogging.Logger", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "work\/martins\/simon\/expect\/core\/ExpectBlock.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "work\/martins\/simon\/expect\/core\/ExpectBlock.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "work\/martins\/simon\/expect\/core\/ExpectBlock.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "work\/martins\/simon\/expect\/core\/ExpectBlock.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "work\/martins\/simon\/expect\/core\/ExpectBlock.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "work\/martins\/simon\/expect\/core\/ExpectBlock.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "work\/martins\/simon\/expect\/core\/ExpectBlock.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/ExpectBlock.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/ExpectBlock.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/ExpectBlock.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "work\/martins\/simon\/expect\/core\/ExpectBlock.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "work\/martins\/simon\/expect\/core\/ExpectBlock.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "work\/martins\/simon\/expect\/core\/ExpectBlock.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "work\/martins\/simon\/expect\/core\/ExpectBlock.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "work\/martins\/simon\/expect\/core\/ExpectBlock.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "work\/martins\/simon\/expect\/core\/ExpectBlock.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "work\/martins\/simon\/expect\/core\/ExpectBlock.html", "kind" : "case class"}, {"name" : "work.martins.simon.expect.core.IntermediateResult", "shortDescription" : "", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "work\/martins\/simon\/expect\/core\/IntermediateResult.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "work\/martins\/simon\/expect\/core\/IntermediateResult.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IntermediateResult[R]) ⇒ Boolean, msg: ⇒ Any): IntermediateResult[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/IntermediateResult.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IntermediateResult[R]) ⇒ Boolean): IntermediateResult[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/IntermediateResult.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): IntermediateResult[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/IntermediateResult.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): IntermediateResult[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/IntermediateResult.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (IntermediateResult[R], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "work\/martins\/simon\/expect\/core\/IntermediateResult.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (IntermediateResult[R], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "work\/martins\/simon\/expect\/core\/IntermediateResult.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "work.martins.simon.expect.core.IntermediateResult#<init>", "error" : "unsupported entity"}, {"label" : "executionAction", "tail" : ": ExecutionAction", "member" : "work.martins.simon.expect.core.IntermediateResult.executionAction", "link" : "work\/martins\/simon\/expect\/core\/IntermediateResult.html#executionAction:work.martins.simon.expect.core.ExecutionAction", "kind" : "val"}, {"label" : "value", "tail" : ": R", "member" : "work.martins.simon.expect.core.IntermediateResult.value", "link" : "work\/martins\/simon\/expect\/core\/IntermediateResult.html#value:R", "kind" : "val"}, {"label" : "output", "tail" : ": String", "member" : "work.martins.simon.expect.core.IntermediateResult.output", "link" : "work\/martins\/simon\/expect\/core\/IntermediateResult.html#output:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "work\/martins\/simon\/expect\/core\/IntermediateResult.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "work\/martins\/simon\/expect\/core\/IntermediateResult.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "work\/martins\/simon\/expect\/core\/IntermediateResult.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "work\/martins\/simon\/expect\/core\/IntermediateResult.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "work\/martins\/simon\/expect\/core\/IntermediateResult.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "work\/martins\/simon\/expect\/core\/IntermediateResult.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "work\/martins\/simon\/expect\/core\/IntermediateResult.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/IntermediateResult.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/IntermediateResult.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/IntermediateResult.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "work\/martins\/simon\/expect\/core\/IntermediateResult.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "work\/martins\/simon\/expect\/core\/IntermediateResult.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "work\/martins\/simon\/expect\/core\/IntermediateResult.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "work\/martins\/simon\/expect\/core\/IntermediateResult.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "work\/martins\/simon\/expect\/core\/IntermediateResult.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "work\/martins\/simon\/expect\/core\/IntermediateResult.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "work\/martins\/simon\/expect\/core\/IntermediateResult.html", "kind" : "case class"}, {"name" : "work.martins.simon.expect.core.RegexWhen", "shortDescription" : "", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "work\/martins\/simon\/expect\/core\/RegexWhen.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "work\/martins\/simon\/expect\/core\/RegexWhen.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (RegexWhen[R]) ⇒ Boolean, msg: ⇒ Any): RegexWhen[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/RegexWhen.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (RegexWhen[R]) ⇒ Boolean): RegexWhen[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/RegexWhen.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): RegexWhen[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/RegexWhen.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): RegexWhen[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/RegexWhen.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (RegexWhen[R], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "work\/martins\/simon\/expect\/core\/RegexWhen.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (RegexWhen[R], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "work\/martins\/simon\/expect\/core\/RegexWhen.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "patternString", "tail" : ": String", "member" : "work.martins.simon.expect.core.RegexWhen.patternString", "link" : "work\/martins\/simon\/expect\/core\/RegexWhen.html#patternString:String", "kind" : "val"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "work.martins.simon.expect.core.RegexWhen.hashCode", "link" : "work\/martins\/simon\/expect\/core\/RegexWhen.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(other: Any): Boolean", "member" : "work.martins.simon.expect.core.RegexWhen.equals", "link" : "work\/martins\/simon\/expect\/core\/RegexWhen.html#equals(other:Any):Boolean", "kind" : "def"}, {"label" : "structurallyEquals", "tail" : "(other: When[R]): Boolean", "member" : "work.martins.simon.expect.core.RegexWhen.structurallyEquals", "link" : "work\/martins\/simon\/expect\/core\/RegexWhen.html#structurallyEquals(other:work.martins.simon.expect.core.When[R]):Boolean", "kind" : "def"}, {"label" : "withActions", "tail" : "(actions: Seq[Action[T, This]]): RegexWhen[T]", "member" : "work.martins.simon.expect.core.RegexWhen.withActions", "link" : "work\/martins\/simon\/expect\/core\/RegexWhen.html#withActions[T](actions:Seq[work.martins.simon.expect.core.actions.Action[T,RegexWhen.this.This]]):work.martins.simon.expect.core.RegexWhen[T]", "kind" : "def"}, {"label" : "regexMatch", "tail" : "(output: String): Match", "member" : "work.martins.simon.expect.core.RegexWhen.regexMatch", "link" : "work\/martins\/simon\/expect\/core\/RegexWhen.html#regexMatch(output:String):util.matching.Regex.Match", "kind" : "def"}, {"label" : "trimToMatchedText", "tail" : "(output: String): String", "member" : "work.martins.simon.expect.core.RegexWhen.trimToMatchedText", "link" : "work\/martins\/simon\/expect\/core\/RegexWhen.html#trimToMatchedText(output:String):String", "kind" : "def"}, {"label" : "matches", "tail" : "(output: String): Boolean", "member" : "work.martins.simon.expect.core.RegexWhen.matches", "link" : "work\/martins\/simon\/expect\/core\/RegexWhen.html#matches(output:String):Boolean", "kind" : "def"}, {"label" : "This", "tail" : "", "member" : "work.martins.simon.expect.core.RegexWhen.This", "link" : "work\/martins\/simon\/expect\/core\/RegexWhen.html#This[X]=work.martins.simon.expect.core.RegexWhen[X]", "kind" : "final type"}, {"member" : "work.martins.simon.expect.core.RegexWhen#<init>", "error" : "unsupported entity"}, {"label" : "actions", "tail" : ": Action[R, RegexWhen]*", "member" : "work.martins.simon.expect.core.RegexWhen.actions", "link" : "work\/martins\/simon\/expect\/core\/RegexWhen.html#actions:work.martins.simon.expect.core.actions.Action[R,work.martins.simon.expect.core.RegexWhen]*", "kind" : "val"}, {"label" : "pattern", "tail" : ": Regex", "member" : "work.martins.simon.expect.core.RegexWhen.pattern", "link" : "work\/martins\/simon\/expect\/core\/RegexWhen.html#pattern:scala.util.matching.Regex", "kind" : "val"}, {"label" : "toString", "tail" : "(): String", "member" : "work.martins.simon.expect.core.When.toString", "link" : "work\/martins\/simon\/expect\/core\/RegexWhen.html#toString():String", "kind" : "def"}, {"label" : "structurallyEqualActions", "tail" : "(other: When[R]): Boolean", "member" : "work.martins.simon.expect.core.When.structurallyEqualActions", "link" : "work\/martins\/simon\/expect\/core\/RegexWhen.html#structurallyEqualActions(other:work.martins.simon.expect.core.When[R]):Boolean", "kind" : "def"}, {"label" : "execute", "tail" : "(process: RichProcess, intermediateResult: IntermediateResult[R]): IntermediateResult[R]", "member" : "work.martins.simon.expect.core.When.execute", "link" : "work\/martins\/simon\/expect\/core\/RegexWhen.html#execute(process:work.martins.simon.expect.core.RichProcess,intermediateResult:work.martins.simon.expect.core.IntermediateResult[R]):work.martins.simon.expect.core.IntermediateResult[R]", "kind" : "def"}, {"label" : "logger", "tail" : ": Logger", "member" : "com.typesafe.scalalogging.LazyLogging.logger", "link" : "work\/martins\/simon\/expect\/core\/RegexWhen.html#logger:com.typesafe.scalalogging.Logger", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "work\/martins\/simon\/expect\/core\/RegexWhen.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "work\/martins\/simon\/expect\/core\/RegexWhen.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "work\/martins\/simon\/expect\/core\/RegexWhen.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "work\/martins\/simon\/expect\/core\/RegexWhen.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "work\/martins\/simon\/expect\/core\/RegexWhen.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "work\/martins\/simon\/expect\/core\/RegexWhen.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "work\/martins\/simon\/expect\/core\/RegexWhen.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/RegexWhen.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/RegexWhen.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/RegexWhen.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "work\/martins\/simon\/expect\/core\/RegexWhen.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "work\/martins\/simon\/expect\/core\/RegexWhen.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "work\/martins\/simon\/expect\/core\/RegexWhen.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "work\/martins\/simon\/expect\/core\/RegexWhen.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "work\/martins\/simon\/expect\/core\/RegexWhen.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "work\/martins\/simon\/expect\/core\/RegexWhen.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "work\/martins\/simon\/expect\/core\/RegexWhen.html", "kind" : "case class"}, {"name" : "work.martins.simon.expect.core.RichProcess", "shortDescription" : "", "object" : "work\/martins\/simon\/expect\/core\/RichProcess$.html", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "work\/martins\/simon\/expect\/core\/RichProcess.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "work\/martins\/simon\/expect\/core\/RichProcess.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (RichProcess) ⇒ Boolean, msg: ⇒ Any): RichProcess", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/RichProcess.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (RichProcess) ⇒ Boolean): RichProcess", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/RichProcess.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): RichProcess", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/RichProcess.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): RichProcess", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/RichProcess.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (RichProcess, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "work\/martins\/simon\/expect\/core\/RichProcess.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (RichProcess, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "work\/martins\/simon\/expect\/core\/RichProcess.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "withCommand", "tail" : "(newCommand: Seq[String]): RichProcess", "member" : "work.martins.simon.expect.core.RichProcess.withCommand", "link" : "work\/martins\/simon\/expect\/core\/RichProcess.html#withCommand(newCommand:Seq[String]):work.martins.simon.expect.core.RichProcess", "kind" : "def"}, {"label" : "destroy", "tail" : "(): Unit", "member" : "work.martins.simon.expect.core.RichProcess.destroy", "link" : "work\/martins\/simon\/expect\/core\/RichProcess.html#destroy():Unit", "kind" : "def"}, {"label" : "print", "tail" : "(text: String): Unit", "member" : "work.martins.simon.expect.core.RichProcess.print", "link" : "work\/martins\/simon\/expect\/core\/RichProcess.html#print(text:String):Unit", "kind" : "def"}, {"label" : "read", "tail" : "(): String", "member" : "work.martins.simon.expect.core.RichProcess.read", "link" : "work\/martins\/simon\/expect\/core\/RichProcess.html#read():String", "kind" : "def"}, {"label" : "deadLineHasTimeLeft", "tail" : "(): Boolean", "member" : "work.martins.simon.expect.core.RichProcess.deadLineHasTimeLeft", "link" : "work\/martins\/simon\/expect\/core\/RichProcess.html#deadLineHasTimeLeft():Boolean", "kind" : "def"}, {"label" : "resetDeadline", "tail" : "(): Unit", "member" : "work.martins.simon.expect.core.RichProcess.resetDeadline", "link" : "work\/martins\/simon\/expect\/core\/RichProcess.html#resetDeadline():Unit", "kind" : "def"}, {"label" : "deadline", "tail" : ": Deadline", "member" : "work.martins.simon.expect.core.RichProcess.deadline", "link" : "work\/martins\/simon\/expect\/core\/RichProcess.html#deadline:scala.concurrent.duration.Deadline", "kind" : "var"}, {"label" : "stdOutThread", "tail" : ": Thread", "member" : "work.martins.simon.expect.core.RichProcess.stdOutThread", "link" : "work\/martins\/simon\/expect\/core\/RichProcess.html#stdOutThread:Thread", "kind" : "val"}, {"label" : "spawnDaemonThread", "tail" : "(f: (Thread) ⇒ Unit): Thread", "member" : "work.martins.simon.expect.core.RichProcess.spawnDaemonThread", "link" : "work\/martins\/simon\/expect\/core\/RichProcess.html#spawnDaemonThread(f:Thread=>Unit):Thread", "kind" : "def"}, {"label" : "blockingQueue", "tail" : ": LinkedBlockingDeque[Either[EOFException, String]]", "member" : "work.martins.simon.expect.core.RichProcess.blockingQueue", "link" : "work\/martins\/simon\/expect\/core\/RichProcess.html#blockingQueue:java.util.concurrent.LinkedBlockingDeque[Either[java.io.EOFException,String]]", "kind" : "val"}, {"label" : "stdIn", "tail" : ": BufferedOutputStream", "member" : "work.martins.simon.expect.core.RichProcess.stdIn", "link" : "work\/martins\/simon\/expect\/core\/RichProcess.html#stdIn:java.io.BufferedOutputStream", "kind" : "val"}, {"label" : "stdOut", "tail" : ": BufferedInputStream", "member" : "work.martins.simon.expect.core.RichProcess.stdOut", "link" : "work\/martins\/simon\/expect\/core\/RichProcess.html#stdOut:java.io.BufferedInputStream", "kind" : "val"}, {"label" : "process", "tail" : ": Process", "member" : "work.martins.simon.expect.core.RichProcess.process", "link" : "work\/martins\/simon\/expect\/core\/RichProcess.html#process:Process", "kind" : "val"}, {"label" : "processBuilder", "tail" : ": ProcessBuilder", "member" : "work.martins.simon.expect.core.RichProcess.processBuilder", "link" : "work\/martins\/simon\/expect\/core\/RichProcess.html#processBuilder:ProcessBuilder", "kind" : "val"}, {"member" : "work.martins.simon.expect.core.RichProcess#<init>", "error" : "unsupported entity"}, {"label" : "redirectStdErrToStdOut", "tail" : ": Boolean", "member" : "work.martins.simon.expect.core.RichProcess.redirectStdErrToStdOut", "link" : "work\/martins\/simon\/expect\/core\/RichProcess.html#redirectStdErrToStdOut:Boolean", "kind" : "val"}, {"label" : "bufferSize", "tail" : ": Int", "member" : "work.martins.simon.expect.core.RichProcess.bufferSize", "link" : "work\/martins\/simon\/expect\/core\/RichProcess.html#bufferSize:Int", "kind" : "val"}, {"label" : "charset", "tail" : ": Charset", "member" : "work.martins.simon.expect.core.RichProcess.charset", "link" : "work\/martins\/simon\/expect\/core\/RichProcess.html#charset:java.nio.charset.Charset", "kind" : "val"}, {"label" : "timeout", "tail" : ": FiniteDuration", "member" : "work.martins.simon.expect.core.RichProcess.timeout", "link" : "work\/martins\/simon\/expect\/core\/RichProcess.html#timeout:scala.concurrent.duration.FiniteDuration", "kind" : "val"}, {"label" : "command", "tail" : ": Seq[String]", "member" : "work.martins.simon.expect.core.RichProcess.command", "link" : "work\/martins\/simon\/expect\/core\/RichProcess.html#command:Seq[String]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "work\/martins\/simon\/expect\/core\/RichProcess.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "work\/martins\/simon\/expect\/core\/RichProcess.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "work\/martins\/simon\/expect\/core\/RichProcess.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "work\/martins\/simon\/expect\/core\/RichProcess.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "work\/martins\/simon\/expect\/core\/RichProcess.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "work\/martins\/simon\/expect\/core\/RichProcess.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "work\/martins\/simon\/expect\/core\/RichProcess.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/RichProcess.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/RichProcess.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/RichProcess.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "work\/martins\/simon\/expect\/core\/RichProcess.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "work\/martins\/simon\/expect\/core\/RichProcess.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "work\/martins\/simon\/expect\/core\/RichProcess.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "work\/martins\/simon\/expect\/core\/RichProcess.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "work\/martins\/simon\/expect\/core\/RichProcess.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "work\/martins\/simon\/expect\/core\/RichProcess.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "work\/martins\/simon\/expect\/core\/RichProcess.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "work\/martins\/simon\/expect\/core\/RichProcess.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "work\/martins\/simon\/expect\/core\/RichProcess.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(command: Seq[String], timeout: FiniteDuration, charset: Charset, bufferSize: Int, redirectStdErrToStdOut: Boolean): RichProcess", "member" : "work.martins.simon.expect.core.RichProcess.apply", "link" : "work\/martins\/simon\/expect\/core\/RichProcess$.html#apply(command:Seq[String],timeout:scala.concurrent.duration.FiniteDuration,charset:java.nio.charset.Charset,bufferSize:Int,redirectStdErrToStdOut:Boolean):work.martins.simon.expect.core.RichProcess", "kind" : "def"}, {"label" : "apply", "tail" : "(command: Seq[String], settings: Settings): RichProcess", "member" : "work.martins.simon.expect.core.RichProcess.apply", "link" : "work\/martins\/simon\/expect\/core\/RichProcess$.html#apply(command:Seq[String],settings:work.martins.simon.expect.Settings):work.martins.simon.expect.core.RichProcess", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "work\/martins\/simon\/expect\/core\/RichProcess$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "work\/martins\/simon\/expect\/core\/RichProcess$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "work\/martins\/simon\/expect\/core\/RichProcess$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "work\/martins\/simon\/expect\/core\/RichProcess$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "work\/martins\/simon\/expect\/core\/RichProcess$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "work\/martins\/simon\/expect\/core\/RichProcess$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "work\/martins\/simon\/expect\/core\/RichProcess$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/RichProcess$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/RichProcess$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/RichProcess$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "work\/martins\/simon\/expect\/core\/RichProcess$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "work\/martins\/simon\/expect\/core\/RichProcess$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "work\/martins\/simon\/expect\/core\/RichProcess$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "work\/martins\/simon\/expect\/core\/RichProcess$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "work\/martins\/simon\/expect\/core\/RichProcess$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "work\/martins\/simon\/expect\/core\/RichProcess$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "work\/martins\/simon\/expect\/core\/RichProcess$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "work\/martins\/simon\/expect\/core\/RichProcess$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "work\/martins\/simon\/expect\/core\/RichProcess$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "work\/martins\/simon\/expect\/core\/RichProcess.html", "kind" : "object"}, {"name" : "work.martins.simon.expect.core.StringWhen", "shortDescription" : "", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "work\/martins\/simon\/expect\/core\/StringWhen.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "work\/martins\/simon\/expect\/core\/StringWhen.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (StringWhen[R]) ⇒ Boolean, msg: ⇒ Any): StringWhen[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/StringWhen.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (StringWhen[R]) ⇒ Boolean): StringWhen[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/StringWhen.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): StringWhen[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/StringWhen.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): StringWhen[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/StringWhen.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (StringWhen[R], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "work\/martins\/simon\/expect\/core\/StringWhen.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (StringWhen[R], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "work\/martins\/simon\/expect\/core\/StringWhen.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "patternString", "tail" : ": String", "member" : "work.martins.simon.expect.core.StringWhen.patternString", "link" : "work\/martins\/simon\/expect\/core\/StringWhen.html#patternString:String", "kind" : "val"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "work.martins.simon.expect.core.StringWhen.hashCode", "link" : "work\/martins\/simon\/expect\/core\/StringWhen.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(other: Any): Boolean", "member" : "work.martins.simon.expect.core.StringWhen.equals", "link" : "work\/martins\/simon\/expect\/core\/StringWhen.html#equals(other:Any):Boolean", "kind" : "def"}, {"label" : "structurallyEquals", "tail" : "(other: When[R]): Boolean", "member" : "work.martins.simon.expect.core.StringWhen.structurallyEquals", "link" : "work\/martins\/simon\/expect\/core\/StringWhen.html#structurallyEquals(other:work.martins.simon.expect.core.When[R]):Boolean", "kind" : "def"}, {"label" : "withActions", "tail" : "(actions: Seq[Action[T, This]]): StringWhen[T]", "member" : "work.martins.simon.expect.core.StringWhen.withActions", "link" : "work\/martins\/simon\/expect\/core\/StringWhen.html#withActions[T](actions:Seq[work.martins.simon.expect.core.actions.Action[T,StringWhen.this.This]]):work.martins.simon.expect.core.StringWhen[T]", "kind" : "def"}, {"label" : "trimToMatchedText", "tail" : "(output: String): String", "member" : "work.martins.simon.expect.core.StringWhen.trimToMatchedText", "link" : "work\/martins\/simon\/expect\/core\/StringWhen.html#trimToMatchedText(output:String):String", "kind" : "def"}, {"label" : "matches", "tail" : "(output: String): Boolean", "member" : "work.martins.simon.expect.core.StringWhen.matches", "link" : "work\/martins\/simon\/expect\/core\/StringWhen.html#matches(output:String):Boolean", "kind" : "def"}, {"label" : "This", "tail" : "", "member" : "work.martins.simon.expect.core.StringWhen.This", "link" : "work\/martins\/simon\/expect\/core\/StringWhen.html#This[X]=work.martins.simon.expect.core.StringWhen[X]", "kind" : "final type"}, {"member" : "work.martins.simon.expect.core.StringWhen#<init>", "error" : "unsupported entity"}, {"label" : "actions", "tail" : ": Action[R, StringWhen]*", "member" : "work.martins.simon.expect.core.StringWhen.actions", "link" : "work\/martins\/simon\/expect\/core\/StringWhen.html#actions:work.martins.simon.expect.core.actions.Action[R,work.martins.simon.expect.core.StringWhen]*", "kind" : "val"}, {"label" : "pattern", "tail" : ": String", "member" : "work.martins.simon.expect.core.StringWhen.pattern", "link" : "work\/martins\/simon\/expect\/core\/StringWhen.html#pattern:String", "kind" : "val"}, {"label" : "toString", "tail" : "(): String", "member" : "work.martins.simon.expect.core.When.toString", "link" : "work\/martins\/simon\/expect\/core\/StringWhen.html#toString():String", "kind" : "def"}, {"label" : "structurallyEqualActions", "tail" : "(other: When[R]): Boolean", "member" : "work.martins.simon.expect.core.When.structurallyEqualActions", "link" : "work\/martins\/simon\/expect\/core\/StringWhen.html#structurallyEqualActions(other:work.martins.simon.expect.core.When[R]):Boolean", "kind" : "def"}, {"label" : "execute", "tail" : "(process: RichProcess, intermediateResult: IntermediateResult[R]): IntermediateResult[R]", "member" : "work.martins.simon.expect.core.When.execute", "link" : "work\/martins\/simon\/expect\/core\/StringWhen.html#execute(process:work.martins.simon.expect.core.RichProcess,intermediateResult:work.martins.simon.expect.core.IntermediateResult[R]):work.martins.simon.expect.core.IntermediateResult[R]", "kind" : "def"}, {"label" : "logger", "tail" : ": Logger", "member" : "com.typesafe.scalalogging.LazyLogging.logger", "link" : "work\/martins\/simon\/expect\/core\/StringWhen.html#logger:com.typesafe.scalalogging.Logger", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "work\/martins\/simon\/expect\/core\/StringWhen.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "work\/martins\/simon\/expect\/core\/StringWhen.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "work\/martins\/simon\/expect\/core\/StringWhen.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "work\/martins\/simon\/expect\/core\/StringWhen.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "work\/martins\/simon\/expect\/core\/StringWhen.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "work\/martins\/simon\/expect\/core\/StringWhen.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "work\/martins\/simon\/expect\/core\/StringWhen.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/StringWhen.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/StringWhen.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/StringWhen.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "work\/martins\/simon\/expect\/core\/StringWhen.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "work\/martins\/simon\/expect\/core\/StringWhen.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "work\/martins\/simon\/expect\/core\/StringWhen.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "work\/martins\/simon\/expect\/core\/StringWhen.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "work\/martins\/simon\/expect\/core\/StringWhen.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "work\/martins\/simon\/expect\/core\/StringWhen.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "work\/martins\/simon\/expect\/core\/StringWhen.html", "kind" : "case class"}, {"name" : "work.martins.simon.expect.core.Terminate", "shortDescription" : "", "object" : "work\/martins\/simon\/expect\/core\/Terminate$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "work\/martins\/simon\/expect\/core\/Terminate$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "work\/martins\/simon\/expect\/core\/Terminate$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "work\/martins\/simon\/expect\/core\/Terminate$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "work\/martins\/simon\/expect\/core\/Terminate$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "work\/martins\/simon\/expect\/core\/Terminate$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "work\/martins\/simon\/expect\/core\/Terminate$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "work\/martins\/simon\/expect\/core\/Terminate$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/Terminate$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/Terminate$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/Terminate$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "work\/martins\/simon\/expect\/core\/Terminate$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "work\/martins\/simon\/expect\/core\/Terminate$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "work\/martins\/simon\/expect\/core\/Terminate$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "work\/martins\/simon\/expect\/core\/Terminate$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "work\/martins\/simon\/expect\/core\/Terminate$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "work\/martins\/simon\/expect\/core\/Terminate$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "work\/martins\/simon\/expect\/core\/Terminate$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "work.martins.simon.expect.core.TimeoutWhen", "shortDescription" : "", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "work\/martins\/simon\/expect\/core\/TimeoutWhen.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "work\/martins\/simon\/expect\/core\/TimeoutWhen.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TimeoutWhen[R]) ⇒ Boolean, msg: ⇒ Any): TimeoutWhen[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/TimeoutWhen.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TimeoutWhen[R]) ⇒ Boolean): TimeoutWhen[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/TimeoutWhen.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): TimeoutWhen[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/TimeoutWhen.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): TimeoutWhen[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/TimeoutWhen.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (TimeoutWhen[R], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "work\/martins\/simon\/expect\/core\/TimeoutWhen.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (TimeoutWhen[R], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "work\/martins\/simon\/expect\/core\/TimeoutWhen.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "patternString", "tail" : ": String", "member" : "work.martins.simon.expect.core.TimeoutWhen.patternString", "link" : "work\/martins\/simon\/expect\/core\/TimeoutWhen.html#patternString:String", "kind" : "val"}, {"label" : "structurallyEquals", "tail" : "(other: When[R]): Boolean", "member" : "work.martins.simon.expect.core.TimeoutWhen.structurallyEquals", "link" : "work\/martins\/simon\/expect\/core\/TimeoutWhen.html#structurallyEquals(other:work.martins.simon.expect.core.When[R]):Boolean", "kind" : "def"}, {"label" : "withActions", "tail" : "(actions: Seq[Action[T, This]]): TimeoutWhen[T]", "member" : "work.martins.simon.expect.core.TimeoutWhen.withActions", "link" : "work\/martins\/simon\/expect\/core\/TimeoutWhen.html#withActions[T](actions:Seq[work.martins.simon.expect.core.actions.Action[T,TimeoutWhen.this.This]]):work.martins.simon.expect.core.TimeoutWhen[T]", "kind" : "def"}, {"label" : "This", "tail" : "", "member" : "work.martins.simon.expect.core.TimeoutWhen.This", "link" : "work\/martins\/simon\/expect\/core\/TimeoutWhen.html#This[X]=work.martins.simon.expect.core.TimeoutWhen[X]", "kind" : "final type"}, {"member" : "work.martins.simon.expect.core.TimeoutWhen#<init>", "error" : "unsupported entity"}, {"label" : "actions", "tail" : ": Action[R, TimeoutWhen]*", "member" : "work.martins.simon.expect.core.TimeoutWhen.actions", "link" : "work\/martins\/simon\/expect\/core\/TimeoutWhen.html#actions:work.martins.simon.expect.core.actions.Action[R,work.martins.simon.expect.core.TimeoutWhen]*", "kind" : "val"}, {"label" : "toString", "tail" : "(): String", "member" : "work.martins.simon.expect.core.When.toString", "link" : "work\/martins\/simon\/expect\/core\/TimeoutWhen.html#toString():String", "kind" : "def"}, {"label" : "structurallyEqualActions", "tail" : "(other: When[R]): Boolean", "member" : "work.martins.simon.expect.core.When.structurallyEqualActions", "link" : "work\/martins\/simon\/expect\/core\/TimeoutWhen.html#structurallyEqualActions(other:work.martins.simon.expect.core.When[R]):Boolean", "kind" : "def"}, {"label" : "execute", "tail" : "(process: RichProcess, intermediateResult: IntermediateResult[R]): IntermediateResult[R]", "member" : "work.martins.simon.expect.core.When.execute", "link" : "work\/martins\/simon\/expect\/core\/TimeoutWhen.html#execute(process:work.martins.simon.expect.core.RichProcess,intermediateResult:work.martins.simon.expect.core.IntermediateResult[R]):work.martins.simon.expect.core.IntermediateResult[R]", "kind" : "def"}, {"label" : "trimToMatchedText", "tail" : "(output: String): String", "member" : "work.martins.simon.expect.core.When.trimToMatchedText", "link" : "work\/martins\/simon\/expect\/core\/TimeoutWhen.html#trimToMatchedText(output:String):String", "kind" : "def"}, {"label" : "matches", "tail" : "(output: String): Boolean", "member" : "work.martins.simon.expect.core.When.matches", "link" : "work\/martins\/simon\/expect\/core\/TimeoutWhen.html#matches(output:String):Boolean", "kind" : "def"}, {"label" : "logger", "tail" : ": Logger", "member" : "com.typesafe.scalalogging.LazyLogging.logger", "link" : "work\/martins\/simon\/expect\/core\/TimeoutWhen.html#logger:com.typesafe.scalalogging.Logger", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "work\/martins\/simon\/expect\/core\/TimeoutWhen.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "work\/martins\/simon\/expect\/core\/TimeoutWhen.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "work\/martins\/simon\/expect\/core\/TimeoutWhen.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "work\/martins\/simon\/expect\/core\/TimeoutWhen.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "work\/martins\/simon\/expect\/core\/TimeoutWhen.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "work\/martins\/simon\/expect\/core\/TimeoutWhen.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "work\/martins\/simon\/expect\/core\/TimeoutWhen.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/TimeoutWhen.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/TimeoutWhen.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/TimeoutWhen.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "work\/martins\/simon\/expect\/core\/TimeoutWhen.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "work\/martins\/simon\/expect\/core\/TimeoutWhen.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "work\/martins\/simon\/expect\/core\/TimeoutWhen.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "work\/martins\/simon\/expect\/core\/TimeoutWhen.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "work\/martins\/simon\/expect\/core\/TimeoutWhen.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "work\/martins\/simon\/expect\/core\/TimeoutWhen.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "work\/martins\/simon\/expect\/core\/TimeoutWhen.html", "kind" : "case class"}, {"name" : "work.martins.simon.expect.core.When", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "work\/martins\/simon\/expect\/core\/When.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "work\/martins\/simon\/expect\/core\/When.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (When[R]) ⇒ Boolean, msg: ⇒ Any): When[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/When.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (When[R]) ⇒ Boolean): When[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/When.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): When[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/When.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): When[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/core\/When.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (When[R], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "work\/martins\/simon\/expect\/core\/When.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (When[R], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "work\/martins\/simon\/expect\/core\/When.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "work.martins.simon.expect.core.When.toString", "link" : "work\/martins\/simon\/expect\/core\/When.html#toString():String", "kind" : "def"}, {"label" : "structurallyEqualActions", "tail" : "(other: When[R]): Boolean", "member" : "work.martins.simon.expect.core.When.structurallyEqualActions", "link" : "work\/martins\/simon\/expect\/core\/When.html#structurallyEqualActions(other:work.martins.simon.expect.core.When[R]):Boolean", "kind" : "def"}, {"label" : "execute", "tail" : "(process: RichProcess, intermediateResult: IntermediateResult[R]): IntermediateResult[R]", "member" : "work.martins.simon.expect.core.When.execute", "link" : "work\/martins\/simon\/expect\/core\/When.html#execute(process:work.martins.simon.expect.core.RichProcess,intermediateResult:work.martins.simon.expect.core.IntermediateResult[R]):work.martins.simon.expect.core.IntermediateResult[R]", "kind" : "def"}, {"label" : "trimToMatchedText", "tail" : "(output: String): String", "member" : "work.martins.simon.expect.core.When.trimToMatchedText", "link" : "work\/martins\/simon\/expect\/core\/When.html#trimToMatchedText(output:String):String", "kind" : "def"}, {"label" : "matches", "tail" : "(output: String): Boolean", "member" : "work.martins.simon.expect.core.When.matches", "link" : "work\/martins\/simon\/expect\/core\/When.html#matches(output:String):Boolean", "kind" : "def"}, {"label" : "logger", "tail" : ": Logger", "member" : "com.typesafe.scalalogging.LazyLogging.logger", "link" : "work\/martins\/simon\/expect\/core\/When.html#logger:com.typesafe.scalalogging.Logger", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "work\/martins\/simon\/expect\/core\/When.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "work\/martins\/simon\/expect\/core\/When.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "work\/martins\/simon\/expect\/core\/When.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "work\/martins\/simon\/expect\/core\/When.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "work\/martins\/simon\/expect\/core\/When.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "work\/martins\/simon\/expect\/core\/When.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "work\/martins\/simon\/expect\/core\/When.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/When.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/When.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/core\/When.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "work\/martins\/simon\/expect\/core\/When.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "work\/martins\/simon\/expect\/core\/When.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "work\/martins\/simon\/expect\/core\/When.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "work\/martins\/simon\/expect\/core\/When.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "work\/martins\/simon\/expect\/core\/When.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "work\/martins\/simon\/expect\/core\/When.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "work\/martins\/simon\/expect\/core\/When.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "work\/martins\/simon\/expect\/core\/When.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "patternString", "tail" : "(): String", "member" : "work.martins.simon.expect.core.When.patternString", "link" : "work\/martins\/simon\/expect\/core\/When.html#patternString:String", "kind" : "abstract def"}, {"label" : "structurallyEquals", "tail" : "(other: When[R]): Boolean", "member" : "work.martins.simon.expect.core.When.structurallyEquals", "link" : "work\/martins\/simon\/expect\/core\/When.html#structurallyEquals(other:work.martins.simon.expect.core.When[R]):Boolean", "kind" : "abstract def"}, {"label" : "withActions", "tail" : "(actions: Seq[Action[T, This]]): This[T]", "member" : "work.martins.simon.expect.core.When.withActions", "link" : "work\/martins\/simon\/expect\/core\/When.html#withActions[T](actions:Seq[work.martins.simon.expect.core.actions.Action[T,When.this.This]]):When.this.This[T]", "kind" : "abstract def"}, {"label" : "actions", "tail" : "(): Seq[Action[R, This]]", "member" : "work.martins.simon.expect.core.When.actions", "link" : "work\/martins\/simon\/expect\/core\/When.html#actions:Seq[work.martins.simon.expect.core.actions.Action[R,When.this.This]]", "kind" : "abstract def"}, {"member" : "work.martins.simon.expect.core.When.This", "error" : "unsupported entity"}], "shortDescription" : "", "trait" : "work\/martins\/simon\/expect\/core\/When.html", "kind" : "trait"}], "work.martins.simon.expect.fluent" : [{"name" : "work.martins.simon.expect.fluent.EndOfFileWhen", "shortDescription" : "", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "work\/martins\/simon\/expect\/fluent\/EndOfFileWhen.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "work\/martins\/simon\/expect\/fluent\/EndOfFileWhen.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (EndOfFileWhen[R]) ⇒ Boolean, msg: ⇒ Any): EndOfFileWhen[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/fluent\/EndOfFileWhen.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (EndOfFileWhen[R]) ⇒ Boolean): EndOfFileWhen[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/fluent\/EndOfFileWhen.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): EndOfFileWhen[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/fluent\/EndOfFileWhen.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): EndOfFileWhen[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/fluent\/EndOfFileWhen.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (EndOfFileWhen[R], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "work\/martins\/simon\/expect\/fluent\/EndOfFileWhen.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (EndOfFileWhen[R], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "work\/martins\/simon\/expect\/fluent\/EndOfFileWhen.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "work.martins.simon.expect.fluent.EndOfFileWhen.hashCode", "link" : "work\/martins\/simon\/expect\/fluent\/EndOfFileWhen.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(other: Any): Boolean", "member" : "work.martins.simon.expect.fluent.EndOfFileWhen.equals", "link" : "work\/martins\/simon\/expect\/fluent\/EndOfFileWhen.html#equals(other:Any):Boolean", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "work.martins.simon.expect.fluent.EndOfFileWhen.toString", "link" : "work\/martins\/simon\/expect\/fluent\/EndOfFileWhen.html#toString():String", "kind" : "def"}, {"label" : "toCore", "tail" : "(): core.EndOfFileWhen[R]", "member" : "work.martins.simon.expect.fluent.EndOfFileWhen.toCore", "link" : "work\/martins\/simon\/expect\/fluent\/EndOfFileWhen.html#toCore:work.martins.simon.expect.core.EndOfFileWhen[R]", "kind" : "def"}, {"label" : "This", "tail" : "", "member" : "work.martins.simon.expect.fluent.EndOfFileWhen.This", "link" : "work\/martins\/simon\/expect\/fluent\/EndOfFileWhen.html#This[X]=work.martins.simon.expect.fluent.EndOfFileWhen[X]", "kind" : "type"}, {"label" : "CW", "tail" : "", "member" : "work.martins.simon.expect.fluent.EndOfFileWhen.CW", "link" : "work\/martins\/simon\/expect\/fluent\/EndOfFileWhen.html#CW[X]=work.martins.simon.expect.core.EndOfFileWhen[X]", "kind" : "type"}, {"member" : "work.martins.simon.expect.fluent.EndOfFileWhen#<init>", "error" : "unsupported entity"}, {"label" : "parent", "tail" : ": ExpectBlock[R]", "member" : "work.martins.simon.expect.fluent.EndOfFileWhen.parent", "link" : "work\/martins\/simon\/expect\/fluent\/EndOfFileWhen.html#parent:work.martins.simon.expect.fluent.ExpectBlock[R]", "kind" : "val"}, {"label" : "toString", "tail" : "(pattern: String): String", "member" : "work.martins.simon.expect.fluent.When.toString", "link" : "work\/martins\/simon\/expect\/fluent\/EndOfFileWhen.html#toString(pattern:String):String", "kind" : "def"}, {"label" : "exit", "tail" : "(): This[R]", "member" : "work.martins.simon.expect.fluent.When.exit", "link" : "work\/martins\/simon\/expect\/fluent\/EndOfFileWhen.html#exit():When.this.This[R]", "kind" : "def"}, {"label" : "addActions", "tail" : "(f: (This[R]) ⇒ Unit): This[R]", "member" : "work.martins.simon.expect.fluent.When.addActions", "link" : "work\/martins\/simon\/expect\/fluent\/EndOfFileWhen.html#addActions(f:When.this.This[R]=>Unit):When.this.This[R]", "kind" : "def"}, {"label" : "returningExpect", "tail" : "(result: ⇒ core.Expect[R]): This[R]", "member" : "work.martins.simon.expect.fluent.When.returningExpect", "link" : "work\/martins\/simon\/expect\/fluent\/EndOfFileWhen.html#returningExpect(result:=>work.martins.simon.expect.core.Expect[R]):When.this.This[R]", "kind" : "def"}, {"label" : "returning", "tail" : "(result: ⇒ R): This[R]", "member" : "work.martins.simon.expect.fluent.When.returning", "link" : "work\/martins\/simon\/expect\/fluent\/EndOfFileWhen.html#returning(result:=>R):When.this.This[R]", "kind" : "def"}, {"label" : "sendln", "tail" : "(text: String): This[R]", "member" : "work.martins.simon.expect.fluent.When.sendln", "link" : "work\/martins\/simon\/expect\/fluent\/EndOfFileWhen.html#sendln(text:String):When.this.This[R]", "kind" : "def"}, {"label" : "send", "tail" : "(text: String): This[R]", "member" : "work.martins.simon.expect.fluent.When.send", "link" : "work\/martins\/simon\/expect\/fluent\/EndOfFileWhen.html#send(text:String):When.this.This[R]", "kind" : "def"}, {"label" : "newAction", "tail" : "(action: Action[R, CW]): This[R]", "member" : "work.martins.simon.expect.fluent.When.newAction", "link" : "work\/martins\/simon\/expect\/fluent\/EndOfFileWhen.html#newAction(action:work.martins.simon.expect.core.actions.Action[R,When.this.CW]):When.this.This[R]", "kind" : "def"}, {"label" : "actions", "tail" : ": Seq[Action[R, CW]]", "member" : "work.martins.simon.expect.fluent.When.actions", "link" : "work\/martins\/simon\/expect\/fluent\/EndOfFileWhen.html#actions:Seq[work.martins.simon.expect.core.actions.Action[R,When.this.CW]]", "kind" : "val"}, {"label" : "whenableParent", "tail" : ": Whenable[R]", "member" : "work.martins.simon.expect.fluent.When.whenableParent", "link" : "work\/martins\/simon\/expect\/fluent\/EndOfFileWhen.html#whenableParent:work.martins.simon.expect.fluent.Whenable[R]", "kind" : "val"}, {"label" : "expectableParent", "tail" : ": Expectable[R]", "member" : "work.martins.simon.expect.fluent.When.expectableParent", "link" : "work\/martins\/simon\/expect\/fluent\/EndOfFileWhen.html#expectableParent:work.martins.simon.expect.fluent.Expectable[R]", "kind" : "val"}, {"label" : "thisSubtype", "tail" : ": This[R]", "member" : "work.martins.simon.expect.fluent.When.thisSubtype", "link" : "work\/martins\/simon\/expect\/fluent\/EndOfFileWhen.html#thisSubtype:When.this.This[R]", "kind" : "val"}, {"label" : "addWhens", "tail" : "(f: (ExpectBlock[R]) ⇒ Unit): ExpectBlock[R]", "member" : "work.martins.simon.expect.fluent.Whenable.addWhens", "link" : "work\/martins\/simon\/expect\/fluent\/EndOfFileWhen.html#addWhens(f:work.martins.simon.expect.fluent.ExpectBlock[R]=>Unit):work.martins.simon.expect.fluent.ExpectBlock[R]", "kind" : "def"}, {"label" : "addWhen", "tail" : "(f: (ExpectBlock[R]) ⇒ W): W", "member" : "work.martins.simon.expect.fluent.Whenable.addWhen", "link" : "work\/martins\/simon\/expect\/fluent\/EndOfFileWhen.html#addWhen[W<:work.martins.simon.expect.fluent.When[R]](f:work.martins.simon.expect.fluent.ExpectBlock[R]=>W):W", "kind" : "def"}, {"label" : "when", "tail" : "(pattern: Timeout.type): TimeoutWhen[R]", "member" : "work.martins.simon.expect.fluent.Whenable.when", "link" : "work\/martins\/simon\/expect\/fluent\/EndOfFileWhen.html#when(pattern:work.martins.simon.expect.Timeout.type):work.martins.simon.expect.fluent.TimeoutWhen[R]", "kind" : "def"}, {"label" : "when", "tail" : "(pattern: EndOfFile.type): EndOfFileWhen[R]", "member" : "work.martins.simon.expect.fluent.Whenable.when", "link" : "work\/martins\/simon\/expect\/fluent\/EndOfFileWhen.html#when(pattern:work.martins.simon.expect.EndOfFile.type):work.martins.simon.expect.fluent.EndOfFileWhen[R]", "kind" : "def"}, {"label" : "when", "tail" : "(pattern: Regex): RegexWhen[R]", "member" : "work.martins.simon.expect.fluent.Whenable.when", "link" : "work\/martins\/simon\/expect\/fluent\/EndOfFileWhen.html#when(pattern:scala.util.matching.Regex):work.martins.simon.expect.fluent.RegexWhen[R]", "kind" : "def"}, {"label" : "when", "tail" : "(pattern: String): StringWhen[R]", "member" : "work.martins.simon.expect.fluent.Whenable.when", "link" : "work\/martins\/simon\/expect\/fluent\/EndOfFileWhen.html#when(pattern:String):work.martins.simon.expect.fluent.StringWhen[R]", "kind" : "def"}, {"label" : "addExpectBlock", "tail" : "(f: (Expect[R]) ⇒ Unit): Expect[R]", "member" : "work.martins.simon.expect.fluent.Expectable.addExpectBlock", "link" : "work\/martins\/simon\/expect\/fluent\/EndOfFileWhen.html#addExpectBlock(f:work.martins.simon.expect.fluent.Expect[R]=>Unit):work.martins.simon.expect.fluent.Expect[R]", "kind" : "def"}, {"label" : "expect", "tail" : "(pattern: EndOfFile.type): EndOfFileWhen[R]", "member" : "work.martins.simon.expect.fluent.Expectable.expect", "link" : "work\/martins\/simon\/expect\/fluent\/EndOfFileWhen.html#expect(pattern:work.martins.simon.expect.EndOfFile.type):work.martins.simon.expect.fluent.EndOfFileWhen[R]", "kind" : "def"}, {"label" : "expect", "tail" : "(pattern: Timeout.type): TimeoutWhen[R]", "member" : "work.martins.simon.expect.fluent.Expectable.expect", "link" : "work\/martins\/simon\/expect\/fluent\/EndOfFileWhen.html#expect(pattern:work.martins.simon.expect.Timeout.type):work.martins.simon.expect.fluent.TimeoutWhen[R]", "kind" : "def"}, {"label" : "expect", "tail" : "(pattern: Regex): RegexWhen[R]", "member" : "work.martins.simon.expect.fluent.Expectable.expect", "link" : "work\/martins\/simon\/expect\/fluent\/EndOfFileWhen.html#expect(pattern:scala.util.matching.Regex):work.martins.simon.expect.fluent.RegexWhen[R]", "kind" : "def"}, {"label" : "expect", "tail" : "(pattern: String): StringWhen[R]", "member" : "work.martins.simon.expect.fluent.Expectable.expect", "link" : "work\/martins\/simon\/expect\/fluent\/EndOfFileWhen.html#expect(pattern:String):work.martins.simon.expect.fluent.StringWhen[R]", "kind" : "def"}, {"label" : "expect", "tail" : "(): ExpectBlock[R]", "member" : "work.martins.simon.expect.fluent.Expectable.expect", "link" : "work\/martins\/simon\/expect\/fluent\/EndOfFileWhen.html#expect:work.martins.simon.expect.fluent.ExpectBlock[R]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "work\/martins\/simon\/expect\/fluent\/EndOfFileWhen.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "work\/martins\/simon\/expect\/fluent\/EndOfFileWhen.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "work\/martins\/simon\/expect\/fluent\/EndOfFileWhen.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "work\/martins\/simon\/expect\/fluent\/EndOfFileWhen.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "work\/martins\/simon\/expect\/fluent\/EndOfFileWhen.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "work\/martins\/simon\/expect\/fluent\/EndOfFileWhen.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "work\/martins\/simon\/expect\/fluent\/EndOfFileWhen.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/fluent\/EndOfFileWhen.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/fluent\/EndOfFileWhen.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/fluent\/EndOfFileWhen.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "work\/martins\/simon\/expect\/fluent\/EndOfFileWhen.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "work\/martins\/simon\/expect\/fluent\/EndOfFileWhen.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "work\/martins\/simon\/expect\/fluent\/EndOfFileWhen.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "work\/martins\/simon\/expect\/fluent\/EndOfFileWhen.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "work\/martins\/simon\/expect\/fluent\/EndOfFileWhen.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "work\/martins\/simon\/expect\/fluent\/EndOfFileWhen.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "work\/martins\/simon\/expect\/fluent\/EndOfFileWhen.html", "kind" : "case class"}, {"name" : "work.martins.simon.expect.fluent.Expect", "shortDescription" : "", "members_class" : [{"label" : "structurallyEquals", "tail" : "(other: core.Expect[R]): Boolean", "member" : "work.martins.simon.expect.fluent.fluentToCoreExpect.structurallyEquals", "link" : "work\/martins\/simon\/expect\/fluent\/Expect.html#structurallyEquals(other:work.martins.simon.expect.core.Expect[R]):Boolean", "kind" : "def"}, {"label" : "transform", "tail" : "(flatMapPF: PartialFunction[R, core.Expect[T]])(mapPF: PartialFunction[R, T]): core.Expect[T]", "member" : "work.martins.simon.expect.fluent.fluentToCoreExpect.transform", "link" : "work\/martins\/simon\/expect\/fluent\/Expect.html#transform[T](flatMapPF:PartialFunction[R,work.martins.simon.expect.core.Expect[T]])(mapPF:PartialFunction[R,T]):work.martins.simon.expect.core.Expect[T]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (R) ⇒ core.Expect[T]): core.Expect[T]", "member" : "work.martins.simon.expect.fluent.fluentToCoreExpect.flatMap", "link" : "work\/martins\/simon\/expect\/fluent\/Expect.html#flatMap[T](f:R=>work.martins.simon.expect.core.Expect[T]):work.martins.simon.expect.core.Expect[T]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (R) ⇒ T): core.Expect[T]", "member" : "work.martins.simon.expect.fluent.fluentToCoreExpect.map", "link" : "work\/martins\/simon\/expect\/fluent\/Expect.html#map[T](f:R=>T):work.martins.simon.expect.core.Expect[T]", "kind" : "def"}, {"label" : "run", "tail" : "(richProcess: RichProcess)(ex: ExecutionContext): Future[R]", "member" : "work.martins.simon.expect.fluent.fluentToCoreExpect.run", "link" : "work\/martins\/simon\/expect\/fluent\/Expect.html#run(richProcess:work.martins.simon.expect.core.RichProcess)(implicitex:scala.concurrent.ExecutionContext):scala.concurrent.Future[R]", "kind" : "def"}, {"label" : "run", "tail" : "(settings: Settings)(ex: ExecutionContext): Future[R]", "member" : "work.martins.simon.expect.fluent.fluentToCoreExpect.run", "link" : "work\/martins\/simon\/expect\/fluent\/Expect.html#run(settings:work.martins.simon.expect.Settings)(implicitex:scala.concurrent.ExecutionContext):scala.concurrent.Future[R]", "kind" : "def"}, {"label" : "run", "tail" : "(timeout: FiniteDuration, charset: Charset, bufferSize: Int, redirectStdErrToStdOut: Boolean)(ex: ExecutionContext): Future[R]", "member" : "work.martins.simon.expect.fluent.fluentToCoreExpect.run", "link" : "work\/martins\/simon\/expect\/fluent\/Expect.html#run(timeout:scala.concurrent.duration.FiniteDuration,charset:java.nio.charset.Charset,bufferSize:Int,redirectStdErrToStdOut:Boolean)(implicitex:scala.concurrent.ExecutionContext):scala.concurrent.Future[R]", "kind" : "def"}, {"label" : "expectBlocks", "tail" : ": core.ExpectBlock[R]*", "member" : "work.martins.simon.expect.fluent.fluentToCoreExpect.expectBlocks", "link" : "work\/martins\/simon\/expect\/fluent\/Expect.html#expectBlocks:work.martins.simon.expect.core.ExpectBlock[R]*", "kind" : "val"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "work\/martins\/simon\/expect\/fluent\/Expect.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "work\/martins\/simon\/expect\/fluent\/Expect.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Expect[R]) ⇒ Boolean, msg: ⇒ Any): Expect[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/fluent\/Expect.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Expect[R]) ⇒ Boolean): Expect[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/fluent\/Expect.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Expect[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/fluent\/Expect.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Expect[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/fluent\/Expect.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Expect[R], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "work\/martins\/simon\/expect\/fluent\/Expect.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Expect[R], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "work\/martins\/simon\/expect\/fluent\/Expect.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "work.martins.simon.expect.fluent.Expect.hashCode", "link" : "work\/martins\/simon\/expect\/fluent\/Expect.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(other: Any): Boolean", "member" : "work.martins.simon.expect.fluent.Expect.equals", "link" : "work\/martins\/simon\/expect\/fluent\/Expect.html#equals(other:Any):Boolean", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "work.martins.simon.expect.fluent.Expect.toString", "link" : "work\/martins\/simon\/expect\/fluent\/Expect.html#toString():String", "kind" : "def"}, {"label" : "toCore", "tail" : "(): core.Expect[R]", "member" : "work.martins.simon.expect.fluent.Expect.toCore", "link" : "work\/martins\/simon\/expect\/fluent\/Expect.html#toCore:work.martins.simon.expect.core.Expect[R]", "kind" : "def"}, {"label" : "addExpectBlock", "tail" : "(f: (Expect[R]) ⇒ Unit): Expect[R]", "member" : "work.martins.simon.expect.fluent.Expect.addExpectBlock", "link" : "work\/martins\/simon\/expect\/fluent\/Expect.html#addExpectBlock(f:work.martins.simon.expect.fluent.Expect[R]=>Unit):work.martins.simon.expect.fluent.Expect[R]", "kind" : "def"}, {"label" : "expect", "tail" : "(): ExpectBlock[R]", "member" : "work.martins.simon.expect.fluent.Expect.expect", "link" : "work\/martins\/simon\/expect\/fluent\/Expect.html#expect:work.martins.simon.expect.fluent.ExpectBlock[R]", "kind" : "def"}, {"label" : "expectableParent", "tail" : ": Expectable[R]", "member" : "work.martins.simon.expect.fluent.Expect.expectableParent", "link" : "work\/martins\/simon\/expect\/fluent\/Expect.html#expectableParent:work.martins.simon.expect.fluent.Expectable[R]", "kind" : "val"}, {"member" : "work.martins.simon.expect.fluent.Expect#<init>", "error" : "unsupported entity"}, {"member" : "work.martins.simon.expect.fluent.Expect#<init>", "error" : "unsupported entity"}, {"member" : "work.martins.simon.expect.fluent.Expect#<init>", "error" : "unsupported entity"}, {"member" : "work.martins.simon.expect.fluent.Expect#<init>", "error" : "unsupported entity"}, {"member" : "work.martins.simon.expect.fluent.Expect#<init>", "error" : "unsupported entity"}, {"label" : "settings", "tail" : ": Settings", "member" : "work.martins.simon.expect.fluent.Expect.settings", "link" : "work\/martins\/simon\/expect\/fluent\/Expect.html#settings:work.martins.simon.expect.Settings", "kind" : "val"}, {"label" : "defaultValue", "tail" : ": R", "member" : "work.martins.simon.expect.fluent.Expect.defaultValue", "link" : "work\/martins\/simon\/expect\/fluent\/Expect.html#defaultValue:R", "kind" : "val"}, {"label" : "command", "tail" : ": Seq[String]", "member" : "work.martins.simon.expect.fluent.Expect.command", "link" : "work\/martins\/simon\/expect\/fluent\/Expect.html#command:Seq[String]", "kind" : "val"}, {"label" : "expect", "tail" : "(pattern: EndOfFile.type): EndOfFileWhen[R]", "member" : "work.martins.simon.expect.fluent.Expectable.expect", "link" : "work\/martins\/simon\/expect\/fluent\/Expect.html#expect(pattern:work.martins.simon.expect.EndOfFile.type):work.martins.simon.expect.fluent.EndOfFileWhen[R]", "kind" : "def"}, {"label" : "expect", "tail" : "(pattern: Timeout.type): TimeoutWhen[R]", "member" : "work.martins.simon.expect.fluent.Expectable.expect", "link" : "work\/martins\/simon\/expect\/fluent\/Expect.html#expect(pattern:work.martins.simon.expect.Timeout.type):work.martins.simon.expect.fluent.TimeoutWhen[R]", "kind" : "def"}, {"label" : "expect", "tail" : "(pattern: Regex): RegexWhen[R]", "member" : "work.martins.simon.expect.fluent.Expectable.expect", "link" : "work\/martins\/simon\/expect\/fluent\/Expect.html#expect(pattern:scala.util.matching.Regex):work.martins.simon.expect.fluent.RegexWhen[R]", "kind" : "def"}, {"label" : "expect", "tail" : "(pattern: String): StringWhen[R]", "member" : "work.martins.simon.expect.fluent.Expectable.expect", "link" : "work\/martins\/simon\/expect\/fluent\/Expect.html#expect(pattern:String):work.martins.simon.expect.fluent.StringWhen[R]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "work\/martins\/simon\/expect\/fluent\/Expect.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "work\/martins\/simon\/expect\/fluent\/Expect.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "work\/martins\/simon\/expect\/fluent\/Expect.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "work\/martins\/simon\/expect\/fluent\/Expect.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "work\/martins\/simon\/expect\/fluent\/Expect.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "work\/martins\/simon\/expect\/fluent\/Expect.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "work\/martins\/simon\/expect\/fluent\/Expect.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/fluent\/Expect.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/fluent\/Expect.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/fluent\/Expect.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "work\/martins\/simon\/expect\/fluent\/Expect.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "work\/martins\/simon\/expect\/fluent\/Expect.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "work\/martins\/simon\/expect\/fluent\/Expect.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "work\/martins\/simon\/expect\/fluent\/Expect.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "work\/martins\/simon\/expect\/fluent\/Expect.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "work\/martins\/simon\/expect\/fluent\/Expect.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "work\/martins\/simon\/expect\/fluent\/Expect.html", "kind" : "class"}, {"name" : "work.martins.simon.expect.fluent.Expectable", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "work\/martins\/simon\/expect\/fluent\/Expectable.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "work\/martins\/simon\/expect\/fluent\/Expectable.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Expectable[R]) ⇒ Boolean, msg: ⇒ Any): Expectable[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/fluent\/Expectable.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Expectable[R]) ⇒ Boolean): Expectable[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/fluent\/Expectable.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Expectable[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/fluent\/Expectable.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Expectable[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/fluent\/Expectable.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Expectable[R], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "work\/martins\/simon\/expect\/fluent\/Expectable.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Expectable[R], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "work\/martins\/simon\/expect\/fluent\/Expectable.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "addExpectBlock", "tail" : "(f: (Expect[R]) ⇒ Unit): Expect[R]", "member" : "work.martins.simon.expect.fluent.Expectable.addExpectBlock", "link" : "work\/martins\/simon\/expect\/fluent\/Expectable.html#addExpectBlock(f:work.martins.simon.expect.fluent.Expect[R]=>Unit):work.martins.simon.expect.fluent.Expect[R]", "kind" : "def"}, {"label" : "expect", "tail" : "(pattern: EndOfFile.type): EndOfFileWhen[R]", "member" : "work.martins.simon.expect.fluent.Expectable.expect", "link" : "work\/martins\/simon\/expect\/fluent\/Expectable.html#expect(pattern:work.martins.simon.expect.EndOfFile.type):work.martins.simon.expect.fluent.EndOfFileWhen[R]", "kind" : "def"}, {"label" : "expect", "tail" : "(pattern: Timeout.type): TimeoutWhen[R]", "member" : "work.martins.simon.expect.fluent.Expectable.expect", "link" : "work\/martins\/simon\/expect\/fluent\/Expectable.html#expect(pattern:work.martins.simon.expect.Timeout.type):work.martins.simon.expect.fluent.TimeoutWhen[R]", "kind" : "def"}, {"label" : "expect", "tail" : "(pattern: Regex): RegexWhen[R]", "member" : "work.martins.simon.expect.fluent.Expectable.expect", "link" : "work\/martins\/simon\/expect\/fluent\/Expectable.html#expect(pattern:scala.util.matching.Regex):work.martins.simon.expect.fluent.RegexWhen[R]", "kind" : "def"}, {"label" : "expect", "tail" : "(pattern: String): StringWhen[R]", "member" : "work.martins.simon.expect.fluent.Expectable.expect", "link" : "work\/martins\/simon\/expect\/fluent\/Expectable.html#expect(pattern:String):work.martins.simon.expect.fluent.StringWhen[R]", "kind" : "def"}, {"label" : "expect", "tail" : "(): ExpectBlock[R]", "member" : "work.martins.simon.expect.fluent.Expectable.expect", "link" : "work\/martins\/simon\/expect\/fluent\/Expectable.html#expect:work.martins.simon.expect.fluent.ExpectBlock[R]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "work\/martins\/simon\/expect\/fluent\/Expectable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "work\/martins\/simon\/expect\/fluent\/Expectable.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "work\/martins\/simon\/expect\/fluent\/Expectable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "work\/martins\/simon\/expect\/fluent\/Expectable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "work\/martins\/simon\/expect\/fluent\/Expectable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "work\/martins\/simon\/expect\/fluent\/Expectable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "work\/martins\/simon\/expect\/fluent\/Expectable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/fluent\/Expectable.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/fluent\/Expectable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/fluent\/Expectable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "work\/martins\/simon\/expect\/fluent\/Expectable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "work\/martins\/simon\/expect\/fluent\/Expectable.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "work\/martins\/simon\/expect\/fluent\/Expectable.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "work\/martins\/simon\/expect\/fluent\/Expectable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "work\/martins\/simon\/expect\/fluent\/Expectable.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "work\/martins\/simon\/expect\/fluent\/Expectable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "work\/martins\/simon\/expect\/fluent\/Expectable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "work\/martins\/simon\/expect\/fluent\/Expectable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "work\/martins\/simon\/expect\/fluent\/Expectable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "expectableParent", "tail" : ": Expectable[R]", "member" : "work.martins.simon.expect.fluent.Expectable.expectableParent", "link" : "work\/martins\/simon\/expect\/fluent\/Expectable.html#expectableParent:work.martins.simon.expect.fluent.Expectable[R]", "kind" : "abstract val"}], "shortDescription" : "", "trait" : "work\/martins\/simon\/expect\/fluent\/Expectable.html", "kind" : "trait"}, {"name" : "work.martins.simon.expect.fluent.ExpectBlock", "shortDescription" : "", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "work\/martins\/simon\/expect\/fluent\/ExpectBlock.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "work\/martins\/simon\/expect\/fluent\/ExpectBlock.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ExpectBlock[R]) ⇒ Boolean, msg: ⇒ Any): ExpectBlock[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/fluent\/ExpectBlock.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ExpectBlock[R]) ⇒ Boolean): ExpectBlock[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/fluent\/ExpectBlock.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ExpectBlock[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/fluent\/ExpectBlock.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ExpectBlock[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/fluent\/ExpectBlock.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ExpectBlock[R], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "work\/martins\/simon\/expect\/fluent\/ExpectBlock.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ExpectBlock[R], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "work\/martins\/simon\/expect\/fluent\/ExpectBlock.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "work.martins.simon.expect.fluent.ExpectBlock.hashCode", "link" : "work\/martins\/simon\/expect\/fluent\/ExpectBlock.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(other: Any): Boolean", "member" : "work.martins.simon.expect.fluent.ExpectBlock.equals", "link" : "work\/martins\/simon\/expect\/fluent\/ExpectBlock.html#equals(other:Any):Boolean", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "work.martins.simon.expect.fluent.ExpectBlock.toString", "link" : "work\/martins\/simon\/expect\/fluent\/ExpectBlock.html#toString():String", "kind" : "def"}, {"label" : "toCore", "tail" : "(): core.ExpectBlock[R]", "member" : "work.martins.simon.expect.fluent.ExpectBlock.toCore", "link" : "work\/martins\/simon\/expect\/fluent\/ExpectBlock.html#toCore:work.martins.simon.expect.core.ExpectBlock[R]", "kind" : "def"}, {"label" : "containsWhens", "tail" : "(): Boolean", "member" : "work.martins.simon.expect.fluent.ExpectBlock.containsWhens", "link" : "work\/martins\/simon\/expect\/fluent\/ExpectBlock.html#containsWhens():Boolean", "kind" : "def"}, {"label" : "addWhens", "tail" : "(f: (ExpectBlock[R]) ⇒ Unit): ExpectBlock[R]", "member" : "work.martins.simon.expect.fluent.ExpectBlock.addWhens", "link" : "work\/martins\/simon\/expect\/fluent\/ExpectBlock.html#addWhens(f:work.martins.simon.expect.fluent.ExpectBlock[R]=>Unit):work.martins.simon.expect.fluent.ExpectBlock[R]", "kind" : "def"}, {"label" : "addWhen", "tail" : "(f: (ExpectBlock[R]) ⇒ W): W", "member" : "work.martins.simon.expect.fluent.ExpectBlock.addWhen", "link" : "work\/martins\/simon\/expect\/fluent\/ExpectBlock.html#addWhen[W<:work.martins.simon.expect.fluent.When[R]](f:work.martins.simon.expect.fluent.ExpectBlock[R]=>W):W", "kind" : "def"}, {"label" : "when", "tail" : "(pattern: Timeout.type): TimeoutWhen[R]", "member" : "work.martins.simon.expect.fluent.ExpectBlock.when", "link" : "work\/martins\/simon\/expect\/fluent\/ExpectBlock.html#when(pattern:work.martins.simon.expect.Timeout.type):work.martins.simon.expect.fluent.TimeoutWhen[R]", "kind" : "def"}, {"label" : "when", "tail" : "(pattern: EndOfFile.type): EndOfFileWhen[R]", "member" : "work.martins.simon.expect.fluent.ExpectBlock.when", "link" : "work\/martins\/simon\/expect\/fluent\/ExpectBlock.html#when(pattern:work.martins.simon.expect.EndOfFile.type):work.martins.simon.expect.fluent.EndOfFileWhen[R]", "kind" : "def"}, {"label" : "when", "tail" : "(pattern: Regex): RegexWhen[R]", "member" : "work.martins.simon.expect.fluent.ExpectBlock.when", "link" : "work\/martins\/simon\/expect\/fluent\/ExpectBlock.html#when(pattern:scala.util.matching.Regex):work.martins.simon.expect.fluent.RegexWhen[R]", "kind" : "def"}, {"label" : "when", "tail" : "(pattern: String): StringWhen[R]", "member" : "work.martins.simon.expect.fluent.ExpectBlock.when", "link" : "work\/martins\/simon\/expect\/fluent\/ExpectBlock.html#when(pattern:String):work.martins.simon.expect.fluent.StringWhen[R]", "kind" : "def"}, {"label" : "newWhen", "tail" : "(when: W): W", "member" : "work.martins.simon.expect.fluent.ExpectBlock.newWhen", "link" : "work\/martins\/simon\/expect\/fluent\/ExpectBlock.html#newWhen[W<:work.martins.simon.expect.fluent.When[R]](when:W):W", "kind" : "def"}, {"label" : "expectableParent", "tail" : ": Expectable[R]", "member" : "work.martins.simon.expect.fluent.ExpectBlock.expectableParent", "link" : "work\/martins\/simon\/expect\/fluent\/ExpectBlock.html#expectableParent:work.martins.simon.expect.fluent.Expectable[R]", "kind" : "val"}, {"label" : "whenableParent", "tail" : ": Whenable[R]", "member" : "work.martins.simon.expect.fluent.ExpectBlock.whenableParent", "link" : "work\/martins\/simon\/expect\/fluent\/ExpectBlock.html#whenableParent:work.martins.simon.expect.fluent.Whenable[R]", "kind" : "val"}, {"label" : "settings", "tail" : ": Settings", "member" : "work.martins.simon.expect.fluent.ExpectBlock.settings", "link" : "work\/martins\/simon\/expect\/fluent\/ExpectBlock.html#settings:work.martins.simon.expect.Settings", "kind" : "val"}, {"member" : "work.martins.simon.expect.fluent.ExpectBlock#<init>", "error" : "unsupported entity"}, {"label" : "parent", "tail" : ": Expect[R]", "member" : "work.martins.simon.expect.fluent.ExpectBlock.parent", "link" : "work\/martins\/simon\/expect\/fluent\/ExpectBlock.html#parent:work.martins.simon.expect.fluent.Expect[R]", "kind" : "val"}, {"label" : "addExpectBlock", "tail" : "(f: (Expect[R]) ⇒ Unit): Expect[R]", "member" : "work.martins.simon.expect.fluent.Expectable.addExpectBlock", "link" : "work\/martins\/simon\/expect\/fluent\/ExpectBlock.html#addExpectBlock(f:work.martins.simon.expect.fluent.Expect[R]=>Unit):work.martins.simon.expect.fluent.Expect[R]", "kind" : "def"}, {"label" : "expect", "tail" : "(pattern: EndOfFile.type): EndOfFileWhen[R]", "member" : "work.martins.simon.expect.fluent.Expectable.expect", "link" : "work\/martins\/simon\/expect\/fluent\/ExpectBlock.html#expect(pattern:work.martins.simon.expect.EndOfFile.type):work.martins.simon.expect.fluent.EndOfFileWhen[R]", "kind" : "def"}, {"label" : "expect", "tail" : "(pattern: Timeout.type): TimeoutWhen[R]", "member" : "work.martins.simon.expect.fluent.Expectable.expect", "link" : "work\/martins\/simon\/expect\/fluent\/ExpectBlock.html#expect(pattern:work.martins.simon.expect.Timeout.type):work.martins.simon.expect.fluent.TimeoutWhen[R]", "kind" : "def"}, {"label" : "expect", "tail" : "(pattern: Regex): RegexWhen[R]", "member" : "work.martins.simon.expect.fluent.Expectable.expect", "link" : "work\/martins\/simon\/expect\/fluent\/ExpectBlock.html#expect(pattern:scala.util.matching.Regex):work.martins.simon.expect.fluent.RegexWhen[R]", "kind" : "def"}, {"label" : "expect", "tail" : "(pattern: String): StringWhen[R]", "member" : "work.martins.simon.expect.fluent.Expectable.expect", "link" : "work\/martins\/simon\/expect\/fluent\/ExpectBlock.html#expect(pattern:String):work.martins.simon.expect.fluent.StringWhen[R]", "kind" : "def"}, {"label" : "expect", "tail" : "(): ExpectBlock[R]", "member" : "work.martins.simon.expect.fluent.Expectable.expect", "link" : "work\/martins\/simon\/expect\/fluent\/ExpectBlock.html#expect:work.martins.simon.expect.fluent.ExpectBlock[R]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "work\/martins\/simon\/expect\/fluent\/ExpectBlock.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "work\/martins\/simon\/expect\/fluent\/ExpectBlock.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "work\/martins\/simon\/expect\/fluent\/ExpectBlock.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "work\/martins\/simon\/expect\/fluent\/ExpectBlock.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "work\/martins\/simon\/expect\/fluent\/ExpectBlock.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "work\/martins\/simon\/expect\/fluent\/ExpectBlock.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "work\/martins\/simon\/expect\/fluent\/ExpectBlock.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/fluent\/ExpectBlock.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/fluent\/ExpectBlock.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/fluent\/ExpectBlock.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "work\/martins\/simon\/expect\/fluent\/ExpectBlock.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "work\/martins\/simon\/expect\/fluent\/ExpectBlock.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "work\/martins\/simon\/expect\/fluent\/ExpectBlock.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "work\/martins\/simon\/expect\/fluent\/ExpectBlock.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "work\/martins\/simon\/expect\/fluent\/ExpectBlock.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "work\/martins\/simon\/expect\/fluent\/ExpectBlock.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "work\/martins\/simon\/expect\/fluent\/ExpectBlock.html", "kind" : "class"}, {"name" : "work.martins.simon.expect.fluent.RegexWhen", "shortDescription" : "", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "work\/martins\/simon\/expect\/fluent\/RegexWhen.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "work\/martins\/simon\/expect\/fluent\/RegexWhen.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (RegexWhen[R]) ⇒ Boolean, msg: ⇒ Any): RegexWhen[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/fluent\/RegexWhen.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (RegexWhen[R]) ⇒ Boolean): RegexWhen[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/fluent\/RegexWhen.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): RegexWhen[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/fluent\/RegexWhen.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): RegexWhen[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/fluent\/RegexWhen.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (RegexWhen[R], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "work\/martins\/simon\/expect\/fluent\/RegexWhen.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (RegexWhen[R], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "work\/martins\/simon\/expect\/fluent\/RegexWhen.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "work.martins.simon.expect.fluent.RegexWhen.hashCode", "link" : "work\/martins\/simon\/expect\/fluent\/RegexWhen.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(other: Any): Boolean", "member" : "work.martins.simon.expect.fluent.RegexWhen.equals", "link" : "work\/martins\/simon\/expect\/fluent\/RegexWhen.html#equals(other:Any):Boolean", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "work.martins.simon.expect.fluent.RegexWhen.toString", "link" : "work\/martins\/simon\/expect\/fluent\/RegexWhen.html#toString():String", "kind" : "def"}, {"label" : "toCore", "tail" : "(): core.RegexWhen[R]", "member" : "work.martins.simon.expect.fluent.RegexWhen.toCore", "link" : "work\/martins\/simon\/expect\/fluent\/RegexWhen.html#toCore:work.martins.simon.expect.core.RegexWhen[R]", "kind" : "def"}, {"label" : "returningExpect", "tail" : "(result: (Match) ⇒ core.Expect[R]): RegexWhen[R]", "member" : "work.martins.simon.expect.fluent.RegexWhen.returningExpect", "link" : "work\/martins\/simon\/expect\/fluent\/RegexWhen.html#returningExpect(result:util.matching.Regex.Match=>work.martins.simon.expect.core.Expect[R]):work.martins.simon.expect.fluent.RegexWhen[R]", "kind" : "def"}, {"label" : "returning", "tail" : "(result: (Match) ⇒ R): RegexWhen[R]", "member" : "work.martins.simon.expect.fluent.RegexWhen.returning", "link" : "work\/martins\/simon\/expect\/fluent\/RegexWhen.html#returning(result:util.matching.Regex.Match=>R):work.martins.simon.expect.fluent.RegexWhen[R]", "kind" : "def"}, {"label" : "sendln", "tail" : "(text: (Match) ⇒ String): RegexWhen[R]", "member" : "work.martins.simon.expect.fluent.RegexWhen.sendln", "link" : "work\/martins\/simon\/expect\/fluent\/RegexWhen.html#sendln(text:util.matching.Regex.Match=>String):work.martins.simon.expect.fluent.RegexWhen[R]", "kind" : "def"}, {"label" : "send", "tail" : "(text: (Match) ⇒ String): RegexWhen[R]", "member" : "work.martins.simon.expect.fluent.RegexWhen.send", "link" : "work\/martins\/simon\/expect\/fluent\/RegexWhen.html#send(text:util.matching.Regex.Match=>String):work.martins.simon.expect.fluent.RegexWhen[R]", "kind" : "def"}, {"label" : "This", "tail" : "", "member" : "work.martins.simon.expect.fluent.RegexWhen.This", "link" : "work\/martins\/simon\/expect\/fluent\/RegexWhen.html#This[X]=work.martins.simon.expect.fluent.RegexWhen[X]", "kind" : "type"}, {"label" : "CW", "tail" : "", "member" : "work.martins.simon.expect.fluent.RegexWhen.CW", "link" : "work\/martins\/simon\/expect\/fluent\/RegexWhen.html#CW[X]=work.martins.simon.expect.core.RegexWhen[X]", "kind" : "type"}, {"member" : "work.martins.simon.expect.fluent.RegexWhen#<init>", "error" : "unsupported entity"}, {"label" : "pattern", "tail" : ": Regex", "member" : "work.martins.simon.expect.fluent.RegexWhen.pattern", "link" : "work\/martins\/simon\/expect\/fluent\/RegexWhen.html#pattern:scala.util.matching.Regex", "kind" : "val"}, {"label" : "parent", "tail" : ": ExpectBlock[R]", "member" : "work.martins.simon.expect.fluent.RegexWhen.parent", "link" : "work\/martins\/simon\/expect\/fluent\/RegexWhen.html#parent:work.martins.simon.expect.fluent.ExpectBlock[R]", "kind" : "val"}, {"label" : "toString", "tail" : "(pattern: String): String", "member" : "work.martins.simon.expect.fluent.When.toString", "link" : "work\/martins\/simon\/expect\/fluent\/RegexWhen.html#toString(pattern:String):String", "kind" : "def"}, {"label" : "exit", "tail" : "(): This[R]", "member" : "work.martins.simon.expect.fluent.When.exit", "link" : "work\/martins\/simon\/expect\/fluent\/RegexWhen.html#exit():When.this.This[R]", "kind" : "def"}, {"label" : "addActions", "tail" : "(f: (This[R]) ⇒ Unit): This[R]", "member" : "work.martins.simon.expect.fluent.When.addActions", "link" : "work\/martins\/simon\/expect\/fluent\/RegexWhen.html#addActions(f:When.this.This[R]=>Unit):When.this.This[R]", "kind" : "def"}, {"label" : "returningExpect", "tail" : "(result: ⇒ core.Expect[R]): This[R]", "member" : "work.martins.simon.expect.fluent.When.returningExpect", "link" : "work\/martins\/simon\/expect\/fluent\/RegexWhen.html#returningExpect(result:=>work.martins.simon.expect.core.Expect[R]):When.this.This[R]", "kind" : "def"}, {"label" : "returning", "tail" : "(result: ⇒ R): This[R]", "member" : "work.martins.simon.expect.fluent.When.returning", "link" : "work\/martins\/simon\/expect\/fluent\/RegexWhen.html#returning(result:=>R):When.this.This[R]", "kind" : "def"}, {"label" : "sendln", "tail" : "(text: String): This[R]", "member" : "work.martins.simon.expect.fluent.When.sendln", "link" : "work\/martins\/simon\/expect\/fluent\/RegexWhen.html#sendln(text:String):When.this.This[R]", "kind" : "def"}, {"label" : "send", "tail" : "(text: String): This[R]", "member" : "work.martins.simon.expect.fluent.When.send", "link" : "work\/martins\/simon\/expect\/fluent\/RegexWhen.html#send(text:String):When.this.This[R]", "kind" : "def"}, {"label" : "newAction", "tail" : "(action: Action[R, CW]): This[R]", "member" : "work.martins.simon.expect.fluent.When.newAction", "link" : "work\/martins\/simon\/expect\/fluent\/RegexWhen.html#newAction(action:work.martins.simon.expect.core.actions.Action[R,When.this.CW]):When.this.This[R]", "kind" : "def"}, {"label" : "actions", "tail" : ": Seq[Action[R, CW]]", "member" : "work.martins.simon.expect.fluent.When.actions", "link" : "work\/martins\/simon\/expect\/fluent\/RegexWhen.html#actions:Seq[work.martins.simon.expect.core.actions.Action[R,When.this.CW]]", "kind" : "val"}, {"label" : "whenableParent", "tail" : ": Whenable[R]", "member" : "work.martins.simon.expect.fluent.When.whenableParent", "link" : "work\/martins\/simon\/expect\/fluent\/RegexWhen.html#whenableParent:work.martins.simon.expect.fluent.Whenable[R]", "kind" : "val"}, {"label" : "expectableParent", "tail" : ": Expectable[R]", "member" : "work.martins.simon.expect.fluent.When.expectableParent", "link" : "work\/martins\/simon\/expect\/fluent\/RegexWhen.html#expectableParent:work.martins.simon.expect.fluent.Expectable[R]", "kind" : "val"}, {"label" : "thisSubtype", "tail" : ": This[R]", "member" : "work.martins.simon.expect.fluent.When.thisSubtype", "link" : "work\/martins\/simon\/expect\/fluent\/RegexWhen.html#thisSubtype:When.this.This[R]", "kind" : "val"}, {"label" : "addWhens", "tail" : "(f: (ExpectBlock[R]) ⇒ Unit): ExpectBlock[R]", "member" : "work.martins.simon.expect.fluent.Whenable.addWhens", "link" : "work\/martins\/simon\/expect\/fluent\/RegexWhen.html#addWhens(f:work.martins.simon.expect.fluent.ExpectBlock[R]=>Unit):work.martins.simon.expect.fluent.ExpectBlock[R]", "kind" : "def"}, {"label" : "addWhen", "tail" : "(f: (ExpectBlock[R]) ⇒ W): W", "member" : "work.martins.simon.expect.fluent.Whenable.addWhen", "link" : "work\/martins\/simon\/expect\/fluent\/RegexWhen.html#addWhen[W<:work.martins.simon.expect.fluent.When[R]](f:work.martins.simon.expect.fluent.ExpectBlock[R]=>W):W", "kind" : "def"}, {"label" : "when", "tail" : "(pattern: Timeout.type): TimeoutWhen[R]", "member" : "work.martins.simon.expect.fluent.Whenable.when", "link" : "work\/martins\/simon\/expect\/fluent\/RegexWhen.html#when(pattern:work.martins.simon.expect.Timeout.type):work.martins.simon.expect.fluent.TimeoutWhen[R]", "kind" : "def"}, {"label" : "when", "tail" : "(pattern: EndOfFile.type): EndOfFileWhen[R]", "member" : "work.martins.simon.expect.fluent.Whenable.when", "link" : "work\/martins\/simon\/expect\/fluent\/RegexWhen.html#when(pattern:work.martins.simon.expect.EndOfFile.type):work.martins.simon.expect.fluent.EndOfFileWhen[R]", "kind" : "def"}, {"label" : "when", "tail" : "(pattern: Regex): RegexWhen[R]", "member" : "work.martins.simon.expect.fluent.Whenable.when", "link" : "work\/martins\/simon\/expect\/fluent\/RegexWhen.html#when(pattern:scala.util.matching.Regex):work.martins.simon.expect.fluent.RegexWhen[R]", "kind" : "def"}, {"label" : "when", "tail" : "(pattern: String): StringWhen[R]", "member" : "work.martins.simon.expect.fluent.Whenable.when", "link" : "work\/martins\/simon\/expect\/fluent\/RegexWhen.html#when(pattern:String):work.martins.simon.expect.fluent.StringWhen[R]", "kind" : "def"}, {"label" : "addExpectBlock", "tail" : "(f: (Expect[R]) ⇒ Unit): Expect[R]", "member" : "work.martins.simon.expect.fluent.Expectable.addExpectBlock", "link" : "work\/martins\/simon\/expect\/fluent\/RegexWhen.html#addExpectBlock(f:work.martins.simon.expect.fluent.Expect[R]=>Unit):work.martins.simon.expect.fluent.Expect[R]", "kind" : "def"}, {"label" : "expect", "tail" : "(pattern: EndOfFile.type): EndOfFileWhen[R]", "member" : "work.martins.simon.expect.fluent.Expectable.expect", "link" : "work\/martins\/simon\/expect\/fluent\/RegexWhen.html#expect(pattern:work.martins.simon.expect.EndOfFile.type):work.martins.simon.expect.fluent.EndOfFileWhen[R]", "kind" : "def"}, {"label" : "expect", "tail" : "(pattern: Timeout.type): TimeoutWhen[R]", "member" : "work.martins.simon.expect.fluent.Expectable.expect", "link" : "work\/martins\/simon\/expect\/fluent\/RegexWhen.html#expect(pattern:work.martins.simon.expect.Timeout.type):work.martins.simon.expect.fluent.TimeoutWhen[R]", "kind" : "def"}, {"label" : "expect", "tail" : "(pattern: Regex): RegexWhen[R]", "member" : "work.martins.simon.expect.fluent.Expectable.expect", "link" : "work\/martins\/simon\/expect\/fluent\/RegexWhen.html#expect(pattern:scala.util.matching.Regex):work.martins.simon.expect.fluent.RegexWhen[R]", "kind" : "def"}, {"label" : "expect", "tail" : "(pattern: String): StringWhen[R]", "member" : "work.martins.simon.expect.fluent.Expectable.expect", "link" : "work\/martins\/simon\/expect\/fluent\/RegexWhen.html#expect(pattern:String):work.martins.simon.expect.fluent.StringWhen[R]", "kind" : "def"}, {"label" : "expect", "tail" : "(): ExpectBlock[R]", "member" : "work.martins.simon.expect.fluent.Expectable.expect", "link" : "work\/martins\/simon\/expect\/fluent\/RegexWhen.html#expect:work.martins.simon.expect.fluent.ExpectBlock[R]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "work\/martins\/simon\/expect\/fluent\/RegexWhen.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "work\/martins\/simon\/expect\/fluent\/RegexWhen.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "work\/martins\/simon\/expect\/fluent\/RegexWhen.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "work\/martins\/simon\/expect\/fluent\/RegexWhen.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "work\/martins\/simon\/expect\/fluent\/RegexWhen.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "work\/martins\/simon\/expect\/fluent\/RegexWhen.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "work\/martins\/simon\/expect\/fluent\/RegexWhen.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/fluent\/RegexWhen.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/fluent\/RegexWhen.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/fluent\/RegexWhen.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "work\/martins\/simon\/expect\/fluent\/RegexWhen.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "work\/martins\/simon\/expect\/fluent\/RegexWhen.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "work\/martins\/simon\/expect\/fluent\/RegexWhen.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "work\/martins\/simon\/expect\/fluent\/RegexWhen.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "work\/martins\/simon\/expect\/fluent\/RegexWhen.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "work\/martins\/simon\/expect\/fluent\/RegexWhen.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "work\/martins\/simon\/expect\/fluent\/RegexWhen.html", "kind" : "case class"}, {"name" : "work.martins.simon.expect.fluent.StringWhen", "shortDescription" : "", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "work\/martins\/simon\/expect\/fluent\/StringWhen.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "work\/martins\/simon\/expect\/fluent\/StringWhen.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (StringWhen[R]) ⇒ Boolean, msg: ⇒ Any): StringWhen[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/fluent\/StringWhen.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (StringWhen[R]) ⇒ Boolean): StringWhen[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/fluent\/StringWhen.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): StringWhen[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/fluent\/StringWhen.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): StringWhen[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/fluent\/StringWhen.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (StringWhen[R], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "work\/martins\/simon\/expect\/fluent\/StringWhen.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (StringWhen[R], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "work\/martins\/simon\/expect\/fluent\/StringWhen.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "work.martins.simon.expect.fluent.StringWhen.hashCode", "link" : "work\/martins\/simon\/expect\/fluent\/StringWhen.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(other: Any): Boolean", "member" : "work.martins.simon.expect.fluent.StringWhen.equals", "link" : "work\/martins\/simon\/expect\/fluent\/StringWhen.html#equals(other:Any):Boolean", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "work.martins.simon.expect.fluent.StringWhen.toString", "link" : "work\/martins\/simon\/expect\/fluent\/StringWhen.html#toString():String", "kind" : "def"}, {"label" : "toCore", "tail" : "(): core.StringWhen[R]", "member" : "work.martins.simon.expect.fluent.StringWhen.toCore", "link" : "work\/martins\/simon\/expect\/fluent\/StringWhen.html#toCore:work.martins.simon.expect.core.StringWhen[R]", "kind" : "def"}, {"label" : "This", "tail" : "", "member" : "work.martins.simon.expect.fluent.StringWhen.This", "link" : "work\/martins\/simon\/expect\/fluent\/StringWhen.html#This[X]=work.martins.simon.expect.fluent.StringWhen[X]", "kind" : "type"}, {"label" : "CW", "tail" : "", "member" : "work.martins.simon.expect.fluent.StringWhen.CW", "link" : "work\/martins\/simon\/expect\/fluent\/StringWhen.html#CW[X]=work.martins.simon.expect.core.StringWhen[X]", "kind" : "type"}, {"member" : "work.martins.simon.expect.fluent.StringWhen#<init>", "error" : "unsupported entity"}, {"label" : "pattern", "tail" : ": String", "member" : "work.martins.simon.expect.fluent.StringWhen.pattern", "link" : "work\/martins\/simon\/expect\/fluent\/StringWhen.html#pattern:String", "kind" : "val"}, {"label" : "parent", "tail" : ": ExpectBlock[R]", "member" : "work.martins.simon.expect.fluent.StringWhen.parent", "link" : "work\/martins\/simon\/expect\/fluent\/StringWhen.html#parent:work.martins.simon.expect.fluent.ExpectBlock[R]", "kind" : "val"}, {"label" : "toString", "tail" : "(pattern: String): String", "member" : "work.martins.simon.expect.fluent.When.toString", "link" : "work\/martins\/simon\/expect\/fluent\/StringWhen.html#toString(pattern:String):String", "kind" : "def"}, {"label" : "exit", "tail" : "(): This[R]", "member" : "work.martins.simon.expect.fluent.When.exit", "link" : "work\/martins\/simon\/expect\/fluent\/StringWhen.html#exit():When.this.This[R]", "kind" : "def"}, {"label" : "addActions", "tail" : "(f: (This[R]) ⇒ Unit): This[R]", "member" : "work.martins.simon.expect.fluent.When.addActions", "link" : "work\/martins\/simon\/expect\/fluent\/StringWhen.html#addActions(f:When.this.This[R]=>Unit):When.this.This[R]", "kind" : "def"}, {"label" : "returningExpect", "tail" : "(result: ⇒ core.Expect[R]): This[R]", "member" : "work.martins.simon.expect.fluent.When.returningExpect", "link" : "work\/martins\/simon\/expect\/fluent\/StringWhen.html#returningExpect(result:=>work.martins.simon.expect.core.Expect[R]):When.this.This[R]", "kind" : "def"}, {"label" : "returning", "tail" : "(result: ⇒ R): This[R]", "member" : "work.martins.simon.expect.fluent.When.returning", "link" : "work\/martins\/simon\/expect\/fluent\/StringWhen.html#returning(result:=>R):When.this.This[R]", "kind" : "def"}, {"label" : "sendln", "tail" : "(text: String): This[R]", "member" : "work.martins.simon.expect.fluent.When.sendln", "link" : "work\/martins\/simon\/expect\/fluent\/StringWhen.html#sendln(text:String):When.this.This[R]", "kind" : "def"}, {"label" : "send", "tail" : "(text: String): This[R]", "member" : "work.martins.simon.expect.fluent.When.send", "link" : "work\/martins\/simon\/expect\/fluent\/StringWhen.html#send(text:String):When.this.This[R]", "kind" : "def"}, {"label" : "newAction", "tail" : "(action: Action[R, CW]): This[R]", "member" : "work.martins.simon.expect.fluent.When.newAction", "link" : "work\/martins\/simon\/expect\/fluent\/StringWhen.html#newAction(action:work.martins.simon.expect.core.actions.Action[R,When.this.CW]):When.this.This[R]", "kind" : "def"}, {"label" : "actions", "tail" : ": Seq[Action[R, CW]]", "member" : "work.martins.simon.expect.fluent.When.actions", "link" : "work\/martins\/simon\/expect\/fluent\/StringWhen.html#actions:Seq[work.martins.simon.expect.core.actions.Action[R,When.this.CW]]", "kind" : "val"}, {"label" : "whenableParent", "tail" : ": Whenable[R]", "member" : "work.martins.simon.expect.fluent.When.whenableParent", "link" : "work\/martins\/simon\/expect\/fluent\/StringWhen.html#whenableParent:work.martins.simon.expect.fluent.Whenable[R]", "kind" : "val"}, {"label" : "expectableParent", "tail" : ": Expectable[R]", "member" : "work.martins.simon.expect.fluent.When.expectableParent", "link" : "work\/martins\/simon\/expect\/fluent\/StringWhen.html#expectableParent:work.martins.simon.expect.fluent.Expectable[R]", "kind" : "val"}, {"label" : "thisSubtype", "tail" : ": This[R]", "member" : "work.martins.simon.expect.fluent.When.thisSubtype", "link" : "work\/martins\/simon\/expect\/fluent\/StringWhen.html#thisSubtype:When.this.This[R]", "kind" : "val"}, {"label" : "addWhens", "tail" : "(f: (ExpectBlock[R]) ⇒ Unit): ExpectBlock[R]", "member" : "work.martins.simon.expect.fluent.Whenable.addWhens", "link" : "work\/martins\/simon\/expect\/fluent\/StringWhen.html#addWhens(f:work.martins.simon.expect.fluent.ExpectBlock[R]=>Unit):work.martins.simon.expect.fluent.ExpectBlock[R]", "kind" : "def"}, {"label" : "addWhen", "tail" : "(f: (ExpectBlock[R]) ⇒ W): W", "member" : "work.martins.simon.expect.fluent.Whenable.addWhen", "link" : "work\/martins\/simon\/expect\/fluent\/StringWhen.html#addWhen[W<:work.martins.simon.expect.fluent.When[R]](f:work.martins.simon.expect.fluent.ExpectBlock[R]=>W):W", "kind" : "def"}, {"label" : "when", "tail" : "(pattern: Timeout.type): TimeoutWhen[R]", "member" : "work.martins.simon.expect.fluent.Whenable.when", "link" : "work\/martins\/simon\/expect\/fluent\/StringWhen.html#when(pattern:work.martins.simon.expect.Timeout.type):work.martins.simon.expect.fluent.TimeoutWhen[R]", "kind" : "def"}, {"label" : "when", "tail" : "(pattern: EndOfFile.type): EndOfFileWhen[R]", "member" : "work.martins.simon.expect.fluent.Whenable.when", "link" : "work\/martins\/simon\/expect\/fluent\/StringWhen.html#when(pattern:work.martins.simon.expect.EndOfFile.type):work.martins.simon.expect.fluent.EndOfFileWhen[R]", "kind" : "def"}, {"label" : "when", "tail" : "(pattern: Regex): RegexWhen[R]", "member" : "work.martins.simon.expect.fluent.Whenable.when", "link" : "work\/martins\/simon\/expect\/fluent\/StringWhen.html#when(pattern:scala.util.matching.Regex):work.martins.simon.expect.fluent.RegexWhen[R]", "kind" : "def"}, {"label" : "when", "tail" : "(pattern: String): StringWhen[R]", "member" : "work.martins.simon.expect.fluent.Whenable.when", "link" : "work\/martins\/simon\/expect\/fluent\/StringWhen.html#when(pattern:String):work.martins.simon.expect.fluent.StringWhen[R]", "kind" : "def"}, {"label" : "addExpectBlock", "tail" : "(f: (Expect[R]) ⇒ Unit): Expect[R]", "member" : "work.martins.simon.expect.fluent.Expectable.addExpectBlock", "link" : "work\/martins\/simon\/expect\/fluent\/StringWhen.html#addExpectBlock(f:work.martins.simon.expect.fluent.Expect[R]=>Unit):work.martins.simon.expect.fluent.Expect[R]", "kind" : "def"}, {"label" : "expect", "tail" : "(pattern: EndOfFile.type): EndOfFileWhen[R]", "member" : "work.martins.simon.expect.fluent.Expectable.expect", "link" : "work\/martins\/simon\/expect\/fluent\/StringWhen.html#expect(pattern:work.martins.simon.expect.EndOfFile.type):work.martins.simon.expect.fluent.EndOfFileWhen[R]", "kind" : "def"}, {"label" : "expect", "tail" : "(pattern: Timeout.type): TimeoutWhen[R]", "member" : "work.martins.simon.expect.fluent.Expectable.expect", "link" : "work\/martins\/simon\/expect\/fluent\/StringWhen.html#expect(pattern:work.martins.simon.expect.Timeout.type):work.martins.simon.expect.fluent.TimeoutWhen[R]", "kind" : "def"}, {"label" : "expect", "tail" : "(pattern: Regex): RegexWhen[R]", "member" : "work.martins.simon.expect.fluent.Expectable.expect", "link" : "work\/martins\/simon\/expect\/fluent\/StringWhen.html#expect(pattern:scala.util.matching.Regex):work.martins.simon.expect.fluent.RegexWhen[R]", "kind" : "def"}, {"label" : "expect", "tail" : "(pattern: String): StringWhen[R]", "member" : "work.martins.simon.expect.fluent.Expectable.expect", "link" : "work\/martins\/simon\/expect\/fluent\/StringWhen.html#expect(pattern:String):work.martins.simon.expect.fluent.StringWhen[R]", "kind" : "def"}, {"label" : "expect", "tail" : "(): ExpectBlock[R]", "member" : "work.martins.simon.expect.fluent.Expectable.expect", "link" : "work\/martins\/simon\/expect\/fluent\/StringWhen.html#expect:work.martins.simon.expect.fluent.ExpectBlock[R]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "work\/martins\/simon\/expect\/fluent\/StringWhen.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "work\/martins\/simon\/expect\/fluent\/StringWhen.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "work\/martins\/simon\/expect\/fluent\/StringWhen.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "work\/martins\/simon\/expect\/fluent\/StringWhen.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "work\/martins\/simon\/expect\/fluent\/StringWhen.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "work\/martins\/simon\/expect\/fluent\/StringWhen.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "work\/martins\/simon\/expect\/fluent\/StringWhen.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/fluent\/StringWhen.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/fluent\/StringWhen.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/fluent\/StringWhen.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "work\/martins\/simon\/expect\/fluent\/StringWhen.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "work\/martins\/simon\/expect\/fluent\/StringWhen.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "work\/martins\/simon\/expect\/fluent\/StringWhen.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "work\/martins\/simon\/expect\/fluent\/StringWhen.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "work\/martins\/simon\/expect\/fluent\/StringWhen.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "work\/martins\/simon\/expect\/fluent\/StringWhen.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "work\/martins\/simon\/expect\/fluent\/StringWhen.html", "kind" : "case class"}, {"name" : "work.martins.simon.expect.fluent.TimeoutWhen", "shortDescription" : "", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "work\/martins\/simon\/expect\/fluent\/TimeoutWhen.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "work\/martins\/simon\/expect\/fluent\/TimeoutWhen.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TimeoutWhen[R]) ⇒ Boolean, msg: ⇒ Any): TimeoutWhen[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/fluent\/TimeoutWhen.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TimeoutWhen[R]) ⇒ Boolean): TimeoutWhen[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/fluent\/TimeoutWhen.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): TimeoutWhen[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/fluent\/TimeoutWhen.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): TimeoutWhen[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/fluent\/TimeoutWhen.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (TimeoutWhen[R], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "work\/martins\/simon\/expect\/fluent\/TimeoutWhen.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (TimeoutWhen[R], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "work\/martins\/simon\/expect\/fluent\/TimeoutWhen.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "work.martins.simon.expect.fluent.TimeoutWhen.hashCode", "link" : "work\/martins\/simon\/expect\/fluent\/TimeoutWhen.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(other: Any): Boolean", "member" : "work.martins.simon.expect.fluent.TimeoutWhen.equals", "link" : "work\/martins\/simon\/expect\/fluent\/TimeoutWhen.html#equals(other:Any):Boolean", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "work.martins.simon.expect.fluent.TimeoutWhen.toString", "link" : "work\/martins\/simon\/expect\/fluent\/TimeoutWhen.html#toString():String", "kind" : "def"}, {"label" : "toCore", "tail" : "(): core.TimeoutWhen[R]", "member" : "work.martins.simon.expect.fluent.TimeoutWhen.toCore", "link" : "work\/martins\/simon\/expect\/fluent\/TimeoutWhen.html#toCore:work.martins.simon.expect.core.TimeoutWhen[R]", "kind" : "def"}, {"label" : "This", "tail" : "", "member" : "work.martins.simon.expect.fluent.TimeoutWhen.This", "link" : "work\/martins\/simon\/expect\/fluent\/TimeoutWhen.html#This[X]=work.martins.simon.expect.fluent.TimeoutWhen[X]", "kind" : "type"}, {"label" : "CW", "tail" : "", "member" : "work.martins.simon.expect.fluent.TimeoutWhen.CW", "link" : "work\/martins\/simon\/expect\/fluent\/TimeoutWhen.html#CW[X]=work.martins.simon.expect.core.TimeoutWhen[X]", "kind" : "type"}, {"member" : "work.martins.simon.expect.fluent.TimeoutWhen#<init>", "error" : "unsupported entity"}, {"label" : "parent", "tail" : ": ExpectBlock[R]", "member" : "work.martins.simon.expect.fluent.TimeoutWhen.parent", "link" : "work\/martins\/simon\/expect\/fluent\/TimeoutWhen.html#parent:work.martins.simon.expect.fluent.ExpectBlock[R]", "kind" : "val"}, {"label" : "toString", "tail" : "(pattern: String): String", "member" : "work.martins.simon.expect.fluent.When.toString", "link" : "work\/martins\/simon\/expect\/fluent\/TimeoutWhen.html#toString(pattern:String):String", "kind" : "def"}, {"label" : "exit", "tail" : "(): This[R]", "member" : "work.martins.simon.expect.fluent.When.exit", "link" : "work\/martins\/simon\/expect\/fluent\/TimeoutWhen.html#exit():When.this.This[R]", "kind" : "def"}, {"label" : "addActions", "tail" : "(f: (This[R]) ⇒ Unit): This[R]", "member" : "work.martins.simon.expect.fluent.When.addActions", "link" : "work\/martins\/simon\/expect\/fluent\/TimeoutWhen.html#addActions(f:When.this.This[R]=>Unit):When.this.This[R]", "kind" : "def"}, {"label" : "returningExpect", "tail" : "(result: ⇒ core.Expect[R]): This[R]", "member" : "work.martins.simon.expect.fluent.When.returningExpect", "link" : "work\/martins\/simon\/expect\/fluent\/TimeoutWhen.html#returningExpect(result:=>work.martins.simon.expect.core.Expect[R]):When.this.This[R]", "kind" : "def"}, {"label" : "returning", "tail" : "(result: ⇒ R): This[R]", "member" : "work.martins.simon.expect.fluent.When.returning", "link" : "work\/martins\/simon\/expect\/fluent\/TimeoutWhen.html#returning(result:=>R):When.this.This[R]", "kind" : "def"}, {"label" : "sendln", "tail" : "(text: String): This[R]", "member" : "work.martins.simon.expect.fluent.When.sendln", "link" : "work\/martins\/simon\/expect\/fluent\/TimeoutWhen.html#sendln(text:String):When.this.This[R]", "kind" : "def"}, {"label" : "send", "tail" : "(text: String): This[R]", "member" : "work.martins.simon.expect.fluent.When.send", "link" : "work\/martins\/simon\/expect\/fluent\/TimeoutWhen.html#send(text:String):When.this.This[R]", "kind" : "def"}, {"label" : "newAction", "tail" : "(action: Action[R, CW]): This[R]", "member" : "work.martins.simon.expect.fluent.When.newAction", "link" : "work\/martins\/simon\/expect\/fluent\/TimeoutWhen.html#newAction(action:work.martins.simon.expect.core.actions.Action[R,When.this.CW]):When.this.This[R]", "kind" : "def"}, {"label" : "actions", "tail" : ": Seq[Action[R, CW]]", "member" : "work.martins.simon.expect.fluent.When.actions", "link" : "work\/martins\/simon\/expect\/fluent\/TimeoutWhen.html#actions:Seq[work.martins.simon.expect.core.actions.Action[R,When.this.CW]]", "kind" : "val"}, {"label" : "whenableParent", "tail" : ": Whenable[R]", "member" : "work.martins.simon.expect.fluent.When.whenableParent", "link" : "work\/martins\/simon\/expect\/fluent\/TimeoutWhen.html#whenableParent:work.martins.simon.expect.fluent.Whenable[R]", "kind" : "val"}, {"label" : "expectableParent", "tail" : ": Expectable[R]", "member" : "work.martins.simon.expect.fluent.When.expectableParent", "link" : "work\/martins\/simon\/expect\/fluent\/TimeoutWhen.html#expectableParent:work.martins.simon.expect.fluent.Expectable[R]", "kind" : "val"}, {"label" : "thisSubtype", "tail" : ": This[R]", "member" : "work.martins.simon.expect.fluent.When.thisSubtype", "link" : "work\/martins\/simon\/expect\/fluent\/TimeoutWhen.html#thisSubtype:When.this.This[R]", "kind" : "val"}, {"label" : "addWhens", "tail" : "(f: (ExpectBlock[R]) ⇒ Unit): ExpectBlock[R]", "member" : "work.martins.simon.expect.fluent.Whenable.addWhens", "link" : "work\/martins\/simon\/expect\/fluent\/TimeoutWhen.html#addWhens(f:work.martins.simon.expect.fluent.ExpectBlock[R]=>Unit):work.martins.simon.expect.fluent.ExpectBlock[R]", "kind" : "def"}, {"label" : "addWhen", "tail" : "(f: (ExpectBlock[R]) ⇒ W): W", "member" : "work.martins.simon.expect.fluent.Whenable.addWhen", "link" : "work\/martins\/simon\/expect\/fluent\/TimeoutWhen.html#addWhen[W<:work.martins.simon.expect.fluent.When[R]](f:work.martins.simon.expect.fluent.ExpectBlock[R]=>W):W", "kind" : "def"}, {"label" : "when", "tail" : "(pattern: Timeout.type): TimeoutWhen[R]", "member" : "work.martins.simon.expect.fluent.Whenable.when", "link" : "work\/martins\/simon\/expect\/fluent\/TimeoutWhen.html#when(pattern:work.martins.simon.expect.Timeout.type):work.martins.simon.expect.fluent.TimeoutWhen[R]", "kind" : "def"}, {"label" : "when", "tail" : "(pattern: EndOfFile.type): EndOfFileWhen[R]", "member" : "work.martins.simon.expect.fluent.Whenable.when", "link" : "work\/martins\/simon\/expect\/fluent\/TimeoutWhen.html#when(pattern:work.martins.simon.expect.EndOfFile.type):work.martins.simon.expect.fluent.EndOfFileWhen[R]", "kind" : "def"}, {"label" : "when", "tail" : "(pattern: Regex): RegexWhen[R]", "member" : "work.martins.simon.expect.fluent.Whenable.when", "link" : "work\/martins\/simon\/expect\/fluent\/TimeoutWhen.html#when(pattern:scala.util.matching.Regex):work.martins.simon.expect.fluent.RegexWhen[R]", "kind" : "def"}, {"label" : "when", "tail" : "(pattern: String): StringWhen[R]", "member" : "work.martins.simon.expect.fluent.Whenable.when", "link" : "work\/martins\/simon\/expect\/fluent\/TimeoutWhen.html#when(pattern:String):work.martins.simon.expect.fluent.StringWhen[R]", "kind" : "def"}, {"label" : "addExpectBlock", "tail" : "(f: (Expect[R]) ⇒ Unit): Expect[R]", "member" : "work.martins.simon.expect.fluent.Expectable.addExpectBlock", "link" : "work\/martins\/simon\/expect\/fluent\/TimeoutWhen.html#addExpectBlock(f:work.martins.simon.expect.fluent.Expect[R]=>Unit):work.martins.simon.expect.fluent.Expect[R]", "kind" : "def"}, {"label" : "expect", "tail" : "(pattern: EndOfFile.type): EndOfFileWhen[R]", "member" : "work.martins.simon.expect.fluent.Expectable.expect", "link" : "work\/martins\/simon\/expect\/fluent\/TimeoutWhen.html#expect(pattern:work.martins.simon.expect.EndOfFile.type):work.martins.simon.expect.fluent.EndOfFileWhen[R]", "kind" : "def"}, {"label" : "expect", "tail" : "(pattern: Timeout.type): TimeoutWhen[R]", "member" : "work.martins.simon.expect.fluent.Expectable.expect", "link" : "work\/martins\/simon\/expect\/fluent\/TimeoutWhen.html#expect(pattern:work.martins.simon.expect.Timeout.type):work.martins.simon.expect.fluent.TimeoutWhen[R]", "kind" : "def"}, {"label" : "expect", "tail" : "(pattern: Regex): RegexWhen[R]", "member" : "work.martins.simon.expect.fluent.Expectable.expect", "link" : "work\/martins\/simon\/expect\/fluent\/TimeoutWhen.html#expect(pattern:scala.util.matching.Regex):work.martins.simon.expect.fluent.RegexWhen[R]", "kind" : "def"}, {"label" : "expect", "tail" : "(pattern: String): StringWhen[R]", "member" : "work.martins.simon.expect.fluent.Expectable.expect", "link" : "work\/martins\/simon\/expect\/fluent\/TimeoutWhen.html#expect(pattern:String):work.martins.simon.expect.fluent.StringWhen[R]", "kind" : "def"}, {"label" : "expect", "tail" : "(): ExpectBlock[R]", "member" : "work.martins.simon.expect.fluent.Expectable.expect", "link" : "work\/martins\/simon\/expect\/fluent\/TimeoutWhen.html#expect:work.martins.simon.expect.fluent.ExpectBlock[R]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "work\/martins\/simon\/expect\/fluent\/TimeoutWhen.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "work\/martins\/simon\/expect\/fluent\/TimeoutWhen.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "work\/martins\/simon\/expect\/fluent\/TimeoutWhen.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "work\/martins\/simon\/expect\/fluent\/TimeoutWhen.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "work\/martins\/simon\/expect\/fluent\/TimeoutWhen.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "work\/martins\/simon\/expect\/fluent\/TimeoutWhen.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "work\/martins\/simon\/expect\/fluent\/TimeoutWhen.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/fluent\/TimeoutWhen.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/fluent\/TimeoutWhen.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/fluent\/TimeoutWhen.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "work\/martins\/simon\/expect\/fluent\/TimeoutWhen.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "work\/martins\/simon\/expect\/fluent\/TimeoutWhen.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "work\/martins\/simon\/expect\/fluent\/TimeoutWhen.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "work\/martins\/simon\/expect\/fluent\/TimeoutWhen.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "work\/martins\/simon\/expect\/fluent\/TimeoutWhen.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "work\/martins\/simon\/expect\/fluent\/TimeoutWhen.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "work\/martins\/simon\/expect\/fluent\/TimeoutWhen.html", "kind" : "case class"}, {"name" : "work.martins.simon.expect.fluent.When", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "work\/martins\/simon\/expect\/fluent\/When.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "work\/martins\/simon\/expect\/fluent\/When.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (When[R]) ⇒ Boolean, msg: ⇒ Any): When[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/fluent\/When.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (When[R]) ⇒ Boolean): When[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/fluent\/When.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): When[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/fluent\/When.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): When[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/fluent\/When.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (When[R], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "work\/martins\/simon\/expect\/fluent\/When.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (When[R], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "work\/martins\/simon\/expect\/fluent\/When.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toString", "tail" : "(pattern: String): String", "member" : "work.martins.simon.expect.fluent.When.toString", "link" : "work\/martins\/simon\/expect\/fluent\/When.html#toString(pattern:String):String", "kind" : "def"}, {"label" : "exit", "tail" : "(): This[R]", "member" : "work.martins.simon.expect.fluent.When.exit", "link" : "work\/martins\/simon\/expect\/fluent\/When.html#exit():When.this.This[R]", "kind" : "def"}, {"label" : "addActions", "tail" : "(f: (This[R]) ⇒ Unit): This[R]", "member" : "work.martins.simon.expect.fluent.When.addActions", "link" : "work\/martins\/simon\/expect\/fluent\/When.html#addActions(f:When.this.This[R]=>Unit):When.this.This[R]", "kind" : "def"}, {"label" : "returningExpect", "tail" : "(result: ⇒ core.Expect[R]): This[R]", "member" : "work.martins.simon.expect.fluent.When.returningExpect", "link" : "work\/martins\/simon\/expect\/fluent\/When.html#returningExpect(result:=>work.martins.simon.expect.core.Expect[R]):When.this.This[R]", "kind" : "def"}, {"label" : "returning", "tail" : "(result: ⇒ R): This[R]", "member" : "work.martins.simon.expect.fluent.When.returning", "link" : "work\/martins\/simon\/expect\/fluent\/When.html#returning(result:=>R):When.this.This[R]", "kind" : "def"}, {"label" : "sendln", "tail" : "(text: String): This[R]", "member" : "work.martins.simon.expect.fluent.When.sendln", "link" : "work\/martins\/simon\/expect\/fluent\/When.html#sendln(text:String):When.this.This[R]", "kind" : "def"}, {"label" : "send", "tail" : "(text: String): This[R]", "member" : "work.martins.simon.expect.fluent.When.send", "link" : "work\/martins\/simon\/expect\/fluent\/When.html#send(text:String):When.this.This[R]", "kind" : "def"}, {"label" : "newAction", "tail" : "(action: Action[R, CW]): This[R]", "member" : "work.martins.simon.expect.fluent.When.newAction", "link" : "work\/martins\/simon\/expect\/fluent\/When.html#newAction(action:work.martins.simon.expect.core.actions.Action[R,When.this.CW]):When.this.This[R]", "kind" : "def"}, {"label" : "actions", "tail" : ": Seq[Action[R, CW]]", "member" : "work.martins.simon.expect.fluent.When.actions", "link" : "work\/martins\/simon\/expect\/fluent\/When.html#actions:Seq[work.martins.simon.expect.core.actions.Action[R,When.this.CW]]", "kind" : "val"}, {"label" : "whenableParent", "tail" : ": Whenable[R]", "member" : "work.martins.simon.expect.fluent.When.whenableParent", "link" : "work\/martins\/simon\/expect\/fluent\/When.html#whenableParent:work.martins.simon.expect.fluent.Whenable[R]", "kind" : "val"}, {"label" : "expectableParent", "tail" : ": Expectable[R]", "member" : "work.martins.simon.expect.fluent.When.expectableParent", "link" : "work\/martins\/simon\/expect\/fluent\/When.html#expectableParent:work.martins.simon.expect.fluent.Expectable[R]", "kind" : "val"}, {"label" : "thisSubtype", "tail" : ": This[R]", "member" : "work.martins.simon.expect.fluent.When.thisSubtype", "link" : "work\/martins\/simon\/expect\/fluent\/When.html#thisSubtype:When.this.This[R]", "kind" : "val"}, {"label" : "addWhens", "tail" : "(f: (ExpectBlock[R]) ⇒ Unit): ExpectBlock[R]", "member" : "work.martins.simon.expect.fluent.Whenable.addWhens", "link" : "work\/martins\/simon\/expect\/fluent\/When.html#addWhens(f:work.martins.simon.expect.fluent.ExpectBlock[R]=>Unit):work.martins.simon.expect.fluent.ExpectBlock[R]", "kind" : "def"}, {"label" : "addWhen", "tail" : "(f: (ExpectBlock[R]) ⇒ W): W", "member" : "work.martins.simon.expect.fluent.Whenable.addWhen", "link" : "work\/martins\/simon\/expect\/fluent\/When.html#addWhen[W<:work.martins.simon.expect.fluent.When[R]](f:work.martins.simon.expect.fluent.ExpectBlock[R]=>W):W", "kind" : "def"}, {"label" : "when", "tail" : "(pattern: Timeout.type): TimeoutWhen[R]", "member" : "work.martins.simon.expect.fluent.Whenable.when", "link" : "work\/martins\/simon\/expect\/fluent\/When.html#when(pattern:work.martins.simon.expect.Timeout.type):work.martins.simon.expect.fluent.TimeoutWhen[R]", "kind" : "def"}, {"label" : "when", "tail" : "(pattern: EndOfFile.type): EndOfFileWhen[R]", "member" : "work.martins.simon.expect.fluent.Whenable.when", "link" : "work\/martins\/simon\/expect\/fluent\/When.html#when(pattern:work.martins.simon.expect.EndOfFile.type):work.martins.simon.expect.fluent.EndOfFileWhen[R]", "kind" : "def"}, {"label" : "when", "tail" : "(pattern: Regex): RegexWhen[R]", "member" : "work.martins.simon.expect.fluent.Whenable.when", "link" : "work\/martins\/simon\/expect\/fluent\/When.html#when(pattern:scala.util.matching.Regex):work.martins.simon.expect.fluent.RegexWhen[R]", "kind" : "def"}, {"label" : "when", "tail" : "(pattern: String): StringWhen[R]", "member" : "work.martins.simon.expect.fluent.Whenable.when", "link" : "work\/martins\/simon\/expect\/fluent\/When.html#when(pattern:String):work.martins.simon.expect.fluent.StringWhen[R]", "kind" : "def"}, {"label" : "addExpectBlock", "tail" : "(f: (Expect[R]) ⇒ Unit): Expect[R]", "member" : "work.martins.simon.expect.fluent.Expectable.addExpectBlock", "link" : "work\/martins\/simon\/expect\/fluent\/When.html#addExpectBlock(f:work.martins.simon.expect.fluent.Expect[R]=>Unit):work.martins.simon.expect.fluent.Expect[R]", "kind" : "def"}, {"label" : "expect", "tail" : "(pattern: EndOfFile.type): EndOfFileWhen[R]", "member" : "work.martins.simon.expect.fluent.Expectable.expect", "link" : "work\/martins\/simon\/expect\/fluent\/When.html#expect(pattern:work.martins.simon.expect.EndOfFile.type):work.martins.simon.expect.fluent.EndOfFileWhen[R]", "kind" : "def"}, {"label" : "expect", "tail" : "(pattern: Timeout.type): TimeoutWhen[R]", "member" : "work.martins.simon.expect.fluent.Expectable.expect", "link" : "work\/martins\/simon\/expect\/fluent\/When.html#expect(pattern:work.martins.simon.expect.Timeout.type):work.martins.simon.expect.fluent.TimeoutWhen[R]", "kind" : "def"}, {"label" : "expect", "tail" : "(pattern: Regex): RegexWhen[R]", "member" : "work.martins.simon.expect.fluent.Expectable.expect", "link" : "work\/martins\/simon\/expect\/fluent\/When.html#expect(pattern:scala.util.matching.Regex):work.martins.simon.expect.fluent.RegexWhen[R]", "kind" : "def"}, {"label" : "expect", "tail" : "(pattern: String): StringWhen[R]", "member" : "work.martins.simon.expect.fluent.Expectable.expect", "link" : "work\/martins\/simon\/expect\/fluent\/When.html#expect(pattern:String):work.martins.simon.expect.fluent.StringWhen[R]", "kind" : "def"}, {"label" : "expect", "tail" : "(): ExpectBlock[R]", "member" : "work.martins.simon.expect.fluent.Expectable.expect", "link" : "work\/martins\/simon\/expect\/fluent\/When.html#expect:work.martins.simon.expect.fluent.ExpectBlock[R]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "work\/martins\/simon\/expect\/fluent\/When.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "work\/martins\/simon\/expect\/fluent\/When.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "work\/martins\/simon\/expect\/fluent\/When.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "work\/martins\/simon\/expect\/fluent\/When.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "work\/martins\/simon\/expect\/fluent\/When.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "work\/martins\/simon\/expect\/fluent\/When.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "work\/martins\/simon\/expect\/fluent\/When.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/fluent\/When.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/fluent\/When.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/fluent\/When.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "work\/martins\/simon\/expect\/fluent\/When.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "work\/martins\/simon\/expect\/fluent\/When.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "work\/martins\/simon\/expect\/fluent\/When.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "work\/martins\/simon\/expect\/fluent\/When.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "work\/martins\/simon\/expect\/fluent\/When.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "work\/martins\/simon\/expect\/fluent\/When.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "work\/martins\/simon\/expect\/fluent\/When.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "work\/martins\/simon\/expect\/fluent\/When.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "work\/martins\/simon\/expect\/fluent\/When.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toCore", "tail" : "(): CW[R]", "member" : "work.martins.simon.expect.fluent.When.toCore", "link" : "work\/martins\/simon\/expect\/fluent\/When.html#toCore:When.this.CW[R]", "kind" : "abstract def"}, {"label" : "parent", "tail" : "(): ExpectBlock[R]", "member" : "work.martins.simon.expect.fluent.When.parent", "link" : "work\/martins\/simon\/expect\/fluent\/When.html#parent:work.martins.simon.expect.fluent.ExpectBlock[R]", "kind" : "abstract def"}, {"member" : "work.martins.simon.expect.fluent.When.This", "error" : "unsupported entity"}, {"member" : "work.martins.simon.expect.fluent.When.CW", "error" : "unsupported entity"}], "shortDescription" : "", "trait" : "work\/martins\/simon\/expect\/fluent\/When.html", "kind" : "trait"}, {"name" : "work.martins.simon.expect.fluent.Whenable", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "work\/martins\/simon\/expect\/fluent\/Whenable.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "work\/martins\/simon\/expect\/fluent\/Whenable.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Whenable[R]) ⇒ Boolean, msg: ⇒ Any): Whenable[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/fluent\/Whenable.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Whenable[R]) ⇒ Boolean): Whenable[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/fluent\/Whenable.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Whenable[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/fluent\/Whenable.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Whenable[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "work\/martins\/simon\/expect\/fluent\/Whenable.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Whenable[R], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "work\/martins\/simon\/expect\/fluent\/Whenable.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Whenable[R], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "work\/martins\/simon\/expect\/fluent\/Whenable.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "addWhens", "tail" : "(f: (ExpectBlock[R]) ⇒ Unit): ExpectBlock[R]", "member" : "work.martins.simon.expect.fluent.Whenable.addWhens", "link" : "work\/martins\/simon\/expect\/fluent\/Whenable.html#addWhens(f:work.martins.simon.expect.fluent.ExpectBlock[R]=>Unit):work.martins.simon.expect.fluent.ExpectBlock[R]", "kind" : "def"}, {"label" : "addWhen", "tail" : "(f: (ExpectBlock[R]) ⇒ W): W", "member" : "work.martins.simon.expect.fluent.Whenable.addWhen", "link" : "work\/martins\/simon\/expect\/fluent\/Whenable.html#addWhen[W<:work.martins.simon.expect.fluent.When[R]](f:work.martins.simon.expect.fluent.ExpectBlock[R]=>W):W", "kind" : "def"}, {"label" : "when", "tail" : "(pattern: Timeout.type): TimeoutWhen[R]", "member" : "work.martins.simon.expect.fluent.Whenable.when", "link" : "work\/martins\/simon\/expect\/fluent\/Whenable.html#when(pattern:work.martins.simon.expect.Timeout.type):work.martins.simon.expect.fluent.TimeoutWhen[R]", "kind" : "def"}, {"label" : "when", "tail" : "(pattern: EndOfFile.type): EndOfFileWhen[R]", "member" : "work.martins.simon.expect.fluent.Whenable.when", "link" : "work\/martins\/simon\/expect\/fluent\/Whenable.html#when(pattern:work.martins.simon.expect.EndOfFile.type):work.martins.simon.expect.fluent.EndOfFileWhen[R]", "kind" : "def"}, {"label" : "when", "tail" : "(pattern: Regex): RegexWhen[R]", "member" : "work.martins.simon.expect.fluent.Whenable.when", "link" : "work\/martins\/simon\/expect\/fluent\/Whenable.html#when(pattern:scala.util.matching.Regex):work.martins.simon.expect.fluent.RegexWhen[R]", "kind" : "def"}, {"label" : "when", "tail" : "(pattern: String): StringWhen[R]", "member" : "work.martins.simon.expect.fluent.Whenable.when", "link" : "work\/martins\/simon\/expect\/fluent\/Whenable.html#when(pattern:String):work.martins.simon.expect.fluent.StringWhen[R]", "kind" : "def"}, {"label" : "addExpectBlock", "tail" : "(f: (Expect[R]) ⇒ Unit): Expect[R]", "member" : "work.martins.simon.expect.fluent.Expectable.addExpectBlock", "link" : "work\/martins\/simon\/expect\/fluent\/Whenable.html#addExpectBlock(f:work.martins.simon.expect.fluent.Expect[R]=>Unit):work.martins.simon.expect.fluent.Expect[R]", "kind" : "def"}, {"label" : "expect", "tail" : "(pattern: EndOfFile.type): EndOfFileWhen[R]", "member" : "work.martins.simon.expect.fluent.Expectable.expect", "link" : "work\/martins\/simon\/expect\/fluent\/Whenable.html#expect(pattern:work.martins.simon.expect.EndOfFile.type):work.martins.simon.expect.fluent.EndOfFileWhen[R]", "kind" : "def"}, {"label" : "expect", "tail" : "(pattern: Timeout.type): TimeoutWhen[R]", "member" : "work.martins.simon.expect.fluent.Expectable.expect", "link" : "work\/martins\/simon\/expect\/fluent\/Whenable.html#expect(pattern:work.martins.simon.expect.Timeout.type):work.martins.simon.expect.fluent.TimeoutWhen[R]", "kind" : "def"}, {"label" : "expect", "tail" : "(pattern: Regex): RegexWhen[R]", "member" : "work.martins.simon.expect.fluent.Expectable.expect", "link" : "work\/martins\/simon\/expect\/fluent\/Whenable.html#expect(pattern:scala.util.matching.Regex):work.martins.simon.expect.fluent.RegexWhen[R]", "kind" : "def"}, {"label" : "expect", "tail" : "(pattern: String): StringWhen[R]", "member" : "work.martins.simon.expect.fluent.Expectable.expect", "link" : "work\/martins\/simon\/expect\/fluent\/Whenable.html#expect(pattern:String):work.martins.simon.expect.fluent.StringWhen[R]", "kind" : "def"}, {"label" : "expect", "tail" : "(): ExpectBlock[R]", "member" : "work.martins.simon.expect.fluent.Expectable.expect", "link" : "work\/martins\/simon\/expect\/fluent\/Whenable.html#expect:work.martins.simon.expect.fluent.ExpectBlock[R]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "work\/martins\/simon\/expect\/fluent\/Whenable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "work\/martins\/simon\/expect\/fluent\/Whenable.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "work\/martins\/simon\/expect\/fluent\/Whenable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "work\/martins\/simon\/expect\/fluent\/Whenable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "work\/martins\/simon\/expect\/fluent\/Whenable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "work\/martins\/simon\/expect\/fluent\/Whenable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "work\/martins\/simon\/expect\/fluent\/Whenable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/fluent\/Whenable.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/fluent\/Whenable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "work\/martins\/simon\/expect\/fluent\/Whenable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "work\/martins\/simon\/expect\/fluent\/Whenable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "work\/martins\/simon\/expect\/fluent\/Whenable.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "work\/martins\/simon\/expect\/fluent\/Whenable.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "work\/martins\/simon\/expect\/fluent\/Whenable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "work\/martins\/simon\/expect\/fluent\/Whenable.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "work\/martins\/simon\/expect\/fluent\/Whenable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "work\/martins\/simon\/expect\/fluent\/Whenable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "work\/martins\/simon\/expect\/fluent\/Whenable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "work\/martins\/simon\/expect\/fluent\/Whenable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "whenableParent", "tail" : ": Whenable[R]", "member" : "work.martins.simon.expect.fluent.Whenable.whenableParent", "link" : "work\/martins\/simon\/expect\/fluent\/Whenable.html#whenableParent:work.martins.simon.expect.fluent.Whenable[R]", "kind" : "abstract val"}, {"label" : "expectableParent", "tail" : ": Expectable[R]", "member" : "work.martins.simon.expect.fluent.Expectable.expectableParent", "link" : "work\/martins\/simon\/expect\/fluent\/Whenable.html#expectableParent:work.martins.simon.expect.fluent.Expectable[R]", "kind" : "abstract val"}], "shortDescription" : "", "trait" : "work\/martins\/simon\/expect\/fluent\/Whenable.html", "kind" : "trait"}]};